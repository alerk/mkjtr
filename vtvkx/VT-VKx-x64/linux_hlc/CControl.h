/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _CCONTROL_H_RPCGEN
#define _CCONTROL_H_RPCGEN

#include <rpc/rpc.h>

#include <pthread.h>

#ifdef __cplusplus
extern "C" {
#endif

#define CCONTROL_RELEASE_VERS 1
#define LEASE_TIMEOUT_MS 120000
#define SWITCHING_EVENT_DEFAULT_VALID_DURATION 40000
#define SWITCHING_EVENT_REFRESH_INTERVAL 20000

enum MkjtricDataTypeCctrl {
	TDT_ALL = -1,
	TDT_None = 0,
	TDT_DETRAW = 1,
	TDT_ACTUALSTATUS = 2,
	TDT_REQUESTEDSTATUS = 3,
	TDT_ACTUALSIGNALINDICATIONS = 4,
	TDT_TARGETSTAGE = 5,
	TDT_ARCHIVEEVENTS = 6,
	TDT_INTERSECTIONRIDES = 7,
	TDT_DEVICEVALUES = 8,
	TDT_RIDEEVENT = 9,
};
typedef enum MkjtricDataTypeCctrl MkjtricDataTypeCctrl;

struct DetDataStruct {
	short subTicks;
	bool_t value;
};
typedef struct DetDataStruct DetDataStruct;

struct DetValuesPerChannel {
	quad_t TicksOfLastChange;
	short nr;
	bool_t value;
	struct {
		u_int detDatas_len;
		struct DetDataStruct *detDatas_val;
	} detDatas;
};
typedef struct DetValuesPerChannel DetValuesPerChannel;

enum DetectorErrorCodeCctrl {
	DEC_NONE = 0,
	DEC_PERIPHERAL_NOT_AVAILABLE = 1,
	DEC_INPUT_NOT_AVAILABLE = 2,
	DEC_INPUT_INIT_FAILED = 3,
	DEC_LOOP_CORRUPTED = 4,
	DEC_PERIPHERAL_TYPE_MISMATCH = 8,
	DEC_CONNECTION_TYPE_INCOMPATIBLE = 9,
	DEC_PERIPHERAL_FW_NOT_COMPATIBLE = 10,
	DEC_PENDING_INPUT_DATA = 16,
	DEC_LOST_INPUT_DATA = 17,
	DEC_PERMANENT_GAP = 32,
	DEC_PERMANENT_OCCUPANCY = 33,
	DEC_FLUTTER_ERROR = 34,
	DEC_UNDEFINED = 99,
};
typedef enum DetectorErrorCodeCctrl DetectorErrorCodeCctrl;

struct DetStatusCctrl {
	int channel;
	u_char quality;
	DetectorErrorCodeCctrl errorCode;
};
typedef struct DetStatusCctrl DetStatusCctrl;

struct DetRawValuesExchg {
	quad_t absTimeDevTicks;
	struct {
		u_int detDatas_len;
		struct DetValuesPerChannel *detDatas_val;
	} detDatas;
	struct {
		u_int detStatus_len;
		struct DetStatusCctrl *detStatus_val;
	} detStatus;
};
typedef struct DetRawValuesExchg DetRawValuesExchg;

enum RetCodeCctrl {
	RC_RPC_ERROR = -1,
	RC_OK = 0,
	RC_ERROR = 1,
	RC_InvalidPrio = 2,
	RC_InvalidDuration = 3,
	RC_InvalidKey = 4,
	RC_UnsupportedReleaseVersion = 5,
	RC_UnknownValue = 99,
};
typedef enum RetCodeCctrl RetCodeCctrl;

enum IntersectionOperatingModeCctrl {
	IOS_SPECIAL = 0,
	IOS_TRAFFIC_ACUATED = 1,
	IOS_MANUAL_STOP = 2,
	IOS_LOCAL_FIX = 3,
	IOS_LOCAL_TIME_SCHEDULE = 4,
	IOS_CONTROL_CENTER = 5,
};
typedef enum IntersectionOperatingModeCctrl IntersectionOperatingModeCctrl;

enum SummaryAlarmCctrl {
	SA_NO_ALARM = 0,
	SA_ALARM = 1,
	SA_ALARM_CAUSING_SWITCH_OFF = 2,
	SA_ALARM_CAUSING_PARTLY_SWITCH_OFF = 3,
	SA_INTERNAL_ALARM = 4,
};
typedef enum SummaryAlarmCctrl SummaryAlarmCctrl;

enum TypeOfModificationCctrl {
	TOM_ModTD = 0,
	TOM_ModPublicTransport = 1,
	TOM_ModTDIndividualMkjtric = 2,
	TOM_ModSynchronisationState = 3,
	TOM_ModPrj1 = 4,
	TOM_ModPrj2 = 5,
	TOM_ModPrj3 = 6,
	TOM_ModPrj4 = 7,
	TOM_ModPrj5 = 8,
	TOM_ModPrj6 = 9,
	TOM_ModPrj7 = 10,
	TOM_ModPrj8 = 11,
	TOM_ModPrj9 = 12,
	TOM_ModPrj10 = 13,
	TOM_ModPrj11 = 14,
	TOM_ModPrj12 = 15,
	TOM_ModPrj13 = 16,
};
typedef enum TypeOfModificationCctrl TypeOfModificationCctrl;

enum SubIntersectionDetailStateCctrl {
	SDS_NONE = 0,
	SDS_ON = 1,
	SDS_OFF_DEFAULT = 2,
	SDS_OFF_FLASH_SECONDARY_DIRECTION = 3,
	SDS_OFF_DARK = 4,
	SDS_OFF_FLASH_ALL = 5,
	SDS_WAIT4SYNC_ON = 10,
	SDS_SWITCHON_PATTERN = 11,
	SDS_WAIT4_OFF = 12,
	SDS_SWITCHOFF_PATTERN = 13,
	SDS_FAULT_OFF = 14,
	SDS_RECOVER_FROM_EMERGENCY_MODE = 15,
};
typedef enum SubIntersectionDetailStateCctrl SubIntersectionDetailStateCctrl;

enum ModOnOffStateCctrl {
	MOOS_NONE = 0,
	MOOS_OFF = 1,
	MOOS_ON = 2,
};
typedef enum ModOnOffStateCctrl ModOnOffStateCctrl;

enum IntersectionStateCctrl {
	IS_NONE = 0,
	IS_ON = 1,
	IS_OFF_DEFAULT = 2,
	IS_OFF_FLASH_SECONDARY_DIRECTION = 3,
	IS_OFF_DARK = 4,
	IS_OFF_FLASH_ALL = 5,
	IS_MANUAL_CYCLIC = 6,
	IS_MANUAL_ACYCLIC = 7,
	IS_FATAL_ERROR = 8,
	IS_RECOVER_FROM_EMERGENCY_MODE = 9,
};
typedef enum IntersectionStateCctrl IntersectionStateCctrl;

struct TTVSubIntersectionDetailStateCctrl {
	int subintersectionNo;
	int sysJobId;
	enum SubIntersectionDetailStateCctrl value;
};
typedef struct TTVSubIntersectionDetailStateCctrl TTVSubIntersectionDetailStateCctrl;

struct TTVModOnOffStateCctrl {
	int sysJobId;
	enum TypeOfModificationCctrl modType;
	int modNo;
	enum ModOnOffStateCctrl value;
};
typedef struct TTVModOnOffStateCctrl TTVModOnOffStateCctrl;

typedef struct {
	u_int TTVModOnOffStateCctrlA_len;
	TTVModOnOffStateCctrl *TTVModOnOffStateCctrlA_val;
} TTVModOnOffStateCctrlA;

struct ActualStatusCctrl {
	quad_t tickTimeOfLastChange;
	enum SummaryAlarmCctrl globalFaultState;
	int operatingModeSysJobId;
	enum IntersectionOperatingModeCctrl operatingMode;
	int signalProgramSysJobId;
	int signalProgram;
	int intersectionOnOffStateSysJobId;
	enum IntersectionStateCctrl intersectionOnOffState;
	struct {
		u_int subIntersectionStates_len;
		TTVSubIntersectionDetailStateCctrl *subIntersectionStates_val;
	} subIntersectionStates;
	int specialInterventionSysJobId;
	int specialIntervention;
	struct {
		u_int modifications_len;
		struct TTVModOnOffStateCctrl *modifications_val;
	} modifications;
};
typedef struct ActualStatusCctrl ActualStatusCctrl;

enum MsgParamTypeInfoCctrl {
	MPTI_BYTE = 0,
	MPTI_UBYTE = 1,
	MPTI_SHORT = 2,
	MPTI_USHORT = 3,
	MPTI_LONG = 4,
	MPTI_ULONG = 5,
	MPTI_FLOAT = 6,
	MPTI_DOUBLE = 7,
	MPTI_STRING = 8,
	MPTI_BOOL = 10,
	MPTI_SYSJOBID = 13,
	MPTI_CHECKSUM = 14,
	MPTI_UTC = 15,
	MPTI_REFERENCE = 16,
	MPTI_ENUM = 17,
	MPTI_INT64 = 18,
};
typedef enum MsgParamTypeInfoCctrl MsgParamTypeInfoCctrl;

struct MsgParamTypeRefCctrl {
	int member;
	int oType;
	struct {
		u_int path_len;
		char *path_val;
	} path;
};
typedef struct MsgParamTypeRefCctrl MsgParamTypeRefCctrl;

struct MsgParamTypeEnumCctrl {
	int ordinal;
	char *name;
};
typedef struct MsgParamTypeEnumCctrl MsgParamTypeEnumCctrl;

struct MsgParameterValueCctrl {
	MsgParamTypeInfoCctrl typeInfo;
	union {
		int intValue;
		bool_t boolValue;
		quad_t timeStamp;
		float fValue;
		double dValue;
		struct {
			u_int checkSum_len;
			char *checkSum_val;
		} checkSum;
		char *strValue;
		MsgParamTypeRefCctrl reference;
		MsgParamTypeEnumCctrl enumValue;
		quad_t int64Value;
	} MsgParameterValueCctrl_u;
};
typedef struct MsgParameterValueCctrl MsgParameterValueCctrl;

struct MsgParameterCctrl {
	char *name;
	MsgParameterValueCctrl value;
};
typedef struct MsgParameterCctrl MsgParameterCctrl;

struct CommonStatusCctrl {
	quad_t tickTimeOfLastChange;
	int otype;
	int value;
};
typedef struct CommonStatusCctrl CommonStatusCctrl;

enum LampFaultStateCctrl {
	LFS_OK = 0,
	LFS_DEFECT = 1,
	LFS_GROUP_DEFECT = 2,
	LFS_NOT_MONITORED = 3,
	LFS_UNUSED = 4,
	LFS_UNKNOWN = 255,
};
typedef enum LampFaultStateCctrl LampFaultStateCctrl;

enum LampFaultTimeConstraintsCctrl {
	LFTC_LAST_HOUR = 0,
	LFTC_LAST_DAY = 1,
	LFTC_SOMETIMES = 2,
	LFTC_NEVER = 3,
};
typedef enum LampFaultTimeConstraintsCctrl LampFaultTimeConstraintsCctrl;

struct LampStatusCctrl {
	quad_t tickTimeOfLastChange;
	int sgNo;
	enum LampFaultTimeConstraintsCctrl tcRed;
	enum LampFaultTimeConstraintsCctrl tcAmber;
	enum LampFaultTimeConstraintsCctrl tcGreen;
	struct {
		u_int redHeads_len;
		enum LampFaultStateCctrl *redHeads_val;
	} redHeads;
	struct {
		u_int amberHeads_len;
		enum LampFaultStateCctrl *amberHeads_val;
	} amberHeads;
	struct {
		u_int greenHeads_len;
		enum LampFaultStateCctrl *greenHeads_val;
	} greenHeads;
};
typedef struct LampStatusCctrl LampStatusCctrl;

struct SpeedVolumeCctrl {
	short speed;
	int volume;
};
typedef struct SpeedVolumeCctrl SpeedVolumeCctrl;

struct DetectorAggregationCctrl {
	short nr;
	int volume;
	int occupanceRate;
	u_char quality;
	struct {
		u_int sv_len;
		SpeedVolumeCctrl *sv_val;
	} sv;
};
typedef struct DetectorAggregationCctrl DetectorAggregationCctrl;

struct AggregationCycleCctrl {
	int samplingInterval;
	int offset;
};
typedef struct AggregationCycleCctrl AggregationCycleCctrl;

struct AggregationCycleResultCctrl {
	RetCodeCctrl retCode;
	union {
		AggregationCycleCctrl ac;
	} AggregationCycleResultCctrl_u;
};
typedef struct AggregationCycleResultCctrl AggregationCycleResultCctrl;

struct AggregationSignallingResultCctrl {
	RetCodeCctrl retCode;
	union {
		int maxSamplinInterval;
	} AggregationSignallingResultCctrl_u;
};
typedef struct AggregationSignallingResultCctrl AggregationSignallingResultCctrl;

struct DetRawValuesGradedCctrl {
	short nr;
	bool_t value;
	u_char quality;
	DetectorErrorCodeCctrl errorCode;
	quad_t TicksOfLastChange;
	struct {
		u_int detDatas_len;
		struct DetDataStruct *detDatas_val;
	} detDatas;
};
typedef struct DetRawValuesGradedCctrl DetRawValuesGradedCctrl;

struct SignalIndicationCctrl {
	int sgNo;
	int ocitColor;
	int colorStartTime;
};
typedef struct SignalIndicationCctrl SignalIndicationCctrl;

struct SignalIndicationsCctrl {
	quad_t baseTicktime;
	quad_t baseUtcMinusTicktime;
	quad_t tx;
	struct {
		u_int sgPatterns_len;
		struct SignalIndicationCctrl *sgPatterns_val;
	} sgPatterns;
};
typedef struct SignalIndicationsCctrl SignalIndicationsCctrl;

struct MkjtricActuationComponentParams {
	struct {
		u_int componentParams_len;
		char *componentParams_val;
	} componentParams;
};
typedef struct MkjtricActuationComponentParams MkjtricActuationComponentParams;

struct MkjtricActuationComponentParamsResult {
	RetCodeCctrl retCode;
	union {
		MkjtricActuationComponentParams tacp;
	} MkjtricActuationComponentParamsResult_u;
};
typedef struct MkjtricActuationComponentParamsResult MkjtricActuationComponentParamsResult;

struct InitiatorCCtrl {
	char *format;
	struct {
		u_int params_len;
		MsgParameterValueCctrl *params_val;
	} params;
};
typedef struct InitiatorCCtrl InitiatorCCtrl;

struct ExternalSgSwitchingEvent {
	int priority;
	quad_t startTickTime;
	quad_t validDuration;
	InitiatorCCtrl initiator;
	int signalGroupNumber;
	int signalIndication;
	bool_t isWithTransition;
	bool_t isWithCorrection;
};
typedef struct ExternalSgSwitchingEvent ExternalSgSwitchingEvent;

typedef struct {
	u_int ExternalSgSwitchingEventArray_len;
	ExternalSgSwitchingEvent *ExternalSgSwitchingEventArray_val;
} ExternalSgSwitchingEventArray;

struct ExternalStageSwitchingEvent {
	int priority;
	quad_t startTickTime;
	quad_t validDuration;
	InitiatorCCtrl initiator;
	int stageNumber;
};
typedef struct ExternalStageSwitchingEvent ExternalStageSwitchingEvent;

typedef struct {
	u_int ExternalStageSwitchingEventArray_len;
	ExternalStageSwitchingEvent *ExternalStageSwitchingEventArray_val;
} ExternalStageSwitchingEventArray;

struct TargetStage {
	int stageNo;
	quad_t stageStartTime;
	int nextStageNo;
	quad_t stageTransitionStartTime;
	quad_t stageTransitionDuration;
	bool_t isStageSignalIndication;
};
typedef struct TargetStage TargetStage;

typedef TargetStage *TargetStagePtr;

enum TypeOfViolation {
	TOV_None = 0,
	TOV_PhaserMissingStageTransition = 1,
	TOV_PhaserStageMintimeViolation = 2,
	TOV_PhaserStageSkipped = 4,
	TOV_ShifterIgtViolation = 8,
	TOV_ShifterColorMintimeViolation = 16,
	TOV_ShifterOffsettimeViolation = 32,
	TOV_ShifterColorSkipped = 64,
	TOV_EventDroppedAtInputCheck = 128,
	TOV_InvalidSgcontrolState = 256,
};
typedef enum TypeOfViolation TypeOfViolation;

enum RequestedModificationStateCctrl {
	RMS_NONE = 0,
	RMS_OFF = 1,
	RMS_ON = 2,
};
typedef enum RequestedModificationStateCctrl RequestedModificationStateCctrl;

enum RequestedNodeStateCctrl {
	RNS_ON = 1,
	RNS_OFF_DEFAULT = 2,
	RNS_OFF_FLASH_SECONDARY_DIRECTION = 3,
	RNS_OFF_DARK = 4,
	RNS_OFF_FLASH_ALL = 5,
	RNS_FAULT_SHUTDOWN = 6,
};
typedef enum RequestedNodeStateCctrl RequestedNodeStateCctrl;

enum RequestedMainNodeStateCctrl {
	RMNS_ON = 1,
	RMNS_OFF_DEFAULT = 2,
	RMNS_OFF_FLASH_SECONDARY_DIRECTION = 3,
	RMNS_OFF_DARK = 4,
	RMNS_OFF_FLASH_ALL = 5,
	RMNS_MANUAL_CYCLIC = 6,
	RMNS_MANUAL_ACYCLIC = 7,
};
typedef enum RequestedMainNodeStateCctrl RequestedMainNodeStateCctrl;

enum RequestedStatusModNoCctrl {
	RSMN_VAState = 0,
	RSMN_OEVState = 1,
	RSMN_IVState = 2,
	RSMN_SynchronisationState = 3,
	RSMN_Proj00 = 4,
	RSMN_Proj01 = 5,
	RSMN_Proj02 = 6,
	RSMN_Proj03 = 7,
	RSMN_Proj04 = 8,
	RSMN_Proj05 = 9,
	RSMN_Proj06 = 10,
	RSMN_Proj07 = 11,
	RSMN_Proj08 = 12,
	RSMN_Proj09 = 13,
	RSMN_Proj10 = 14,
	RSMN_Proj11 = 15,
	RSMN_Proj12 = 16,
};
typedef enum RequestedStatusModNoCctrl RequestedStatusModNoCctrl;

struct TimeConstrainedTransactionTaggedIntValueCctrl {
	int value;
	int sysJobId;
	int priority;
	quad_t validUntilDeviceTime;
};
typedef struct TimeConstrainedTransactionTaggedIntValueCctrl TimeConstrainedTransactionTaggedIntValueCctrl;

struct TcTTVModOnOffStateCctrl {
	RequestedModificationStateCctrl value;
	int sysJobId;
	int priority;
	quad_t validUntilDeviceTime;
	RequestedStatusModNoCctrl modType;
	int modNo;
};
typedef struct TcTTVModOnOffStateCctrl TcTTVModOnOffStateCctrl;

struct RequestedStatusCctrl {
	TimeConstrainedTransactionTaggedIntValueCctrl intersectionState;
	struct {
		u_int modState_len;
		TcTTVModOnOffStateCctrl *modState_val;
	} modState;
	TimeConstrainedTransactionTaggedIntValueCctrl signalProgram;
	TimeConstrainedTransactionTaggedIntValueCctrl specialIntervention;
	TimeConstrainedTransactionTaggedIntValueCctrl subIntersectionState[4];
};
typedef struct RequestedStatusCctrl RequestedStatusCctrl;

enum RequestedStatusPriorityCctrl {
	RSP_JAUT = 10,
	RSP_TA = 20,
	RSP_CentralSystem = 30,
	RSP_ServicePC = 35,
	RSP_Manual = 40,
	RSP_ManualBlocking = 50,
	RSP_SiCentralSystem = 110,
	RSP_SiTA = 120,
	RSP_SiDetector = 130,
	RSP_SiGUI = 140,
	RSP_SiTrain = 150,
	RSP_SwUpdateLock = 899,
	RSP_MainsFaultLock = 900,
	RSP_FaultLock = 910,
	RSP_LicenseLock = 920,
	RSP_MaxPrio = 999,
	RSP_Internal = 1000,
};
typedef enum RequestedStatusPriorityCctrl RequestedStatusPriorityCctrl;

enum ConfigType {
	CT_BASE = 1,
	CT_SYSTEM = 2,
	CT_TACODE = 4,
	CT_TAPARAM = 8,
};
typedef enum ConfigType ConfigType;

enum CheckResult {
	CR_NOT_AFFECTED = 0,
	CR_ON_THE_FLY = 2,
	CR_TA_RESTART = 3,
	CR_RESTART = 4,
	CR_REFUSE = 8,
};
typedef enum CheckResult CheckResult;

enum UnitId {
	UID_FIRMWARE_CCONTROL = 2,
	UID_TRAFFIC_ACTUACTED_CCONTROL = 3,
	UID_CENTRAL_ADAPTER_CCONTROL = 4,
};
typedef enum UnitId UnitId;

enum SeverityCctrl {
	SMS_UNKNOWN = 0,
	SMS_OK = 1,
	SMS_HINT = 2,
	SMS_WARNING = 3,
	SMS_ERROR = 4,
	SMS_FAULT = 5,
};
typedef enum SeverityCctrl SeverityCctrl;

struct CfgMessageCctrl {
	SeverityCctrl severity;
	quad_t ticks;
	int sysjobid;
	InitiatorCCtrl msg;
};
typedef struct CfgMessageCctrl CfgMessageCctrl;

struct CheckRespondCctrl {
	CheckResult result;
	struct {
		u_int Messages_len;
		CfgMessageCctrl *Messages_val;
	} Messages;
};
typedef struct CheckRespondCctrl CheckRespondCctrl;

struct CltStatusMsgsCctrl {
	enum UnitId unit;
	struct {
		u_int msgs_len;
		CfgMessageCctrl *msgs_val;
	} msgs;
};
typedef struct CltStatusMsgsCctrl CltStatusMsgsCctrl;

enum SignalGroupDetailTypeCctrl {
	SGDT_VEH_3Aspect = 1,
	SGDT_VEH_2Aspect = 2,
	SGDT_VEH_1Aspect = 3,
	SGDT_RightTurners_2Aspect = 4,
	SGDT_RightTurners_1Aspect = 5,
	SGDT_LeftTurners_2Aspect = 6,
	SGDT_LeftTurners_1Aspect = 7,
	SGDT_BUS_3Aspect = 8,
	SGDT_BUS_2Aspect = 9,
	SGDT_BUS_1Aspect = 10,
	SGDT_TRAM_3Aspect = 11,
	SGDT_TRAM_2Aspect = 12,
	SGDT_TRAM_1Aspect = 13,
	SGDT_Cyclist_3Aspect = 14,
	SGDT_Cyclist_2Aspect = 15,
	SGDT_Cyclist_1Aspect = 16,
	SGDT_PED_3Aspect = 17,
	SGDT_PED_2Aspect = 18,
	SGDT_PED_1Aspect = 19,
	SGDT_BLIND_PERS_SIG = 20,
	SGDT_SPEED_SIG = 21,
	SGDT_FLASHER = 22,
	SGDT_Warning_Flasher = 23,
	SGDT_Double_Flasher = 24,
	SGDT_CONTACT_SIG = 25,
	SGDT_DOOR_CLOSE_SIG = 26,
	SGDT_Cyclist_Ped_SIG = 29,
	SGDT_ALTERNATE_FLASHER = 30,
	SGDT_RightTurners_3Aspect = 31,
	SGDT_LeftTurners_3Aspect = 32,
	SGDT_Cyclist_Ped_SIG_3Aspect = 33,
	SGDT_Cyclist_Ped_SIG_1Aspect = 34,
	SGDT_Red_Light_Camera_Kfz = 35,
	SGDT_PED_BLIND_SIG = 249,
	SGDT_PT_4POINT_SIG = 250,
	SGDT_PERMISSIVE_AND = 251,
	SGDT_PERMISSIVE_OR = 252,
	SGDT_NO_TYPE = 255,
};
typedef enum SignalGroupDetailTypeCctrl SignalGroupDetailTypeCctrl;

struct CfgSgInfo {
	int sgNo;
	struct {
		u_int greenStateColors_len;
		int *greenStateColors_val;
	} greenStateColors;
	struct {
		u_int redStateColors_len;
		int *redStateColors_val;
	} redStateColors;
};
typedef struct CfgSgInfo CfgSgInfo;

struct CfgSgStateTransitionElementCCtrl {
	int color;
	int duration_100ms;
};
typedef struct CfgSgStateTransitionElementCCtrl CfgSgStateTransitionElementCCtrl;

struct CfgSgStateTransitionCCtrl {
	int no;
	struct {
		u_int elements_len;
		CfgSgStateTransitionElementCCtrl *elements_val;
	} elements;
};
typedef struct CfgSgStateTransitionCCtrl CfgSgStateTransitionCCtrl;

struct CfgSgInfo2CCtrl {
	int sgNo;
	char *name;
	int partialIntersectionNo;
	SignalGroupDetailTypeCctrl sgType;
	bool_t isMainDirection;
	struct {
		u_int greenStateColors_len;
		int *greenStateColors_val;
	} greenStateColors;
	struct {
		u_int redStateColors_len;
		int *redStateColors_val;
	} redStateColors;
	struct {
		u_int transGnRd_len;
		CfgSgStateTransitionCCtrl *transGnRd_val;
	} transGnRd;
	struct {
		u_int transRdGn_len;
		CfgSgStateTransitionCCtrl *transRdGn_val;
	} transRdGn;
	struct {
		u_int minGreen_len;
		CfgSgStateTransitionCCtrl *minGreen_val;
	} minGreen;
	struct {
		u_int minRed_len;
		CfgSgStateTransitionCCtrl *minRed_val;
	} minRed;
};
typedef struct CfgSgInfo2CCtrl CfgSgInfo2CCtrl;

struct CfgSgDetParam {
	int sgNo;
	int detNo;
	int demandResetThreshold;
	int runningGapThreshold;
};
typedef struct CfgSgDetParam CfgSgDetParam;

struct CfgSignalisation {
	int sgNo;
	int color;
};
typedef struct CfgSignalisation CfgSignalisation;

struct CfgStage {
	int stageNo;
	struct {
		u_int signalisations_len;
		struct CfgSignalisation *signalisations_val;
	} signalisations;
};
typedef struct CfgStage CfgStage;

struct CfgStageSequenceElement2 {
	int stageSequenceElementNo;
	int stageNo;
	int minDuration_100ms;
	int maxDuration_100ms;
	bool_t isExtendable;
	bool_t isMandatory;
	int extendableStageDuration_100ms;
	bool_t isAddTimeToPredecessor;
	bool_t isAddTimeToFollower;
	bool_t isFixedOrderStage;
	struct {
		u_int demandedByPtDirection_len;
		int *demandedByPtDirection_val;
	} demandedByPtDirection;
	struct {
		u_int sgOnDemandList_len;
		int *sgOnDemandList_val;
	} sgOnDemandList;
};
typedef struct CfgStageSequenceElement2 CfgStageSequenceElement2;

struct CfgStageTransitionSwitchingTime {
	int sgNo;
	int signalIndication;
	int time_100ms;
};
typedef struct CfgStageTransitionSwitchingTime CfgStageTransitionSwitchingTime;

struct CfgStageTransition {
	int stageTransitionNo;
	bool_t isCalculatedWithMinGreen;
	int fromStageNo;
	int toStageNo;
	int duration_100ms;
	struct {
		u_int switchingTimeList_len;
		CfgStageTransitionSwitchingTime *switchingTimeList_val;
	} switchingTimeList;
};
typedef struct CfgStageTransition CfgStageTransition;

struct CfgStageSequencePlan2 {
	int splNo;
	short tu_100ms;
	int syncStageSequenceElementNo;
	int idleStageSequenceElementNo;
	short gsp_100ms;
	bool_t isSynchronized;
	struct {
		u_int stageSequences_len;
		struct CfgStageSequenceElement2 *stageSequences_val;
	} stageSequences;
	struct {
		u_int stageTransitions_len;
		struct CfgStageTransition *stageTransitions_val;
	} stageTransitions;
	int offset_100ms;
	int maxExtensionPT_100ms;
	int activationRoutineDuration_100ms;
	int deactivationRoutineDuration_100ms;
};
typedef struct CfgStageSequencePlan2 CfgStageSequencePlan2;

struct CfgSignalplanInfoCCtrl {
	int splNo;
	char *name;
	short tu_100ms;
	short gsp_100ms;
	short offset_100ms;
	short activationPointOfTime_100ms;
	short deactivationPointOfTime_100ms;
	int itRef;
	struct {
		u_int minGreenRefs_len;
		int *minGreenRefs_val;
	} minGreenRefs;
	struct {
		u_int minRedRefs_len;
		int *minRedRefs_val;
	} minRedRefs;
	struct {
		u_int transGnRdRefs_len;
		int *transGnRdRefs_val;
	} transGnRdRefs;
	struct {
		u_int transRdGnRefs_len;
		int *transRdGnRefs_val;
	} transRdGnRefs;
	struct {
		u_int switchingTimeList_len;
		struct CfgStageTransitionSwitchingTime *switchingTimeList_val;
	} switchingTimeList;
};
typedef struct CfgSignalplanInfoCCtrl CfgSignalplanInfoCCtrl;

enum ReCalculationMethodCctrl {
	RCM_NO = 0,
	RCM_UTC = 1,
	RCM_1_1 = 2,
	RCM_1980 = 3,
	RCM_0_0 = 4,
};
typedef enum ReCalculationMethodCctrl ReCalculationMethodCctrl;

enum SyncMethodCctrl {
	SM_GSP_SIEMENS = 0,
	SM_GSP_RILSA = 4,
	SM_STRETCH = 3,
};
typedef enum SyncMethodCctrl SyncMethodCctrl;

struct CfgSyncInfoCctrl {
	ReCalculationMethodCctrl reCalculationMethod;
	SyncMethodCctrl syncMethod;
	int syncCyclesAllowed;
	int globalRefTimeShift_100ms;
};
typedef struct CfgSyncInfoCctrl CfgSyncInfoCctrl;

struct CfgInterGreenTimeElementCctrl {
	int enteringSgNo;
	int clearingSgNo;
	int value;
};
typedef struct CfgInterGreenTimeElementCctrl CfgInterGreenTimeElementCctrl;

struct CfgInterGreenTimeTableCctrl {
	int igTableNo;
	struct {
		u_int elements_len;
		CfgInterGreenTimeElementCctrl *elements_val;
	} elements;
};
typedef struct CfgInterGreenTimeTableCctrl CfgInterGreenTimeTableCctrl;

enum CfgSelector {
	CS_CfgError = 0,
	CS_CfgSgInfo = 1,
	CS_CfgSgDetParam = 2,
	CS_CfgStages = 3,
	CS_CfgSystem_pulse_ms = 5,
	CS_CfgSyncInfoCctrl = 6,
	CS_CfgStageSequencePlan2 = 7,
	CS_CfgInterGreenTimeTables = 8,
	CS_CfgSgInfo2CCtrl = 9,
	CS_CfgSignalplanInfoCCtrl = 10,
	CS_CfgDetectorParamCctrl = 11,
	CS_CfgGeneralParamCctrl = 12,
};
typedef enum CfgSelector CfgSelector;

struct CfgInfoBaseCctrl {
	int no;
	char *shortname;
	char *name;
};
typedef struct CfgInfoBaseCctrl CfgInfoBaseCctrl;

struct CfgInfoConnection {
	char *communicationType;
	char *controlPrinciple;
};
typedef struct CfgInfoConnection CfgInfoConnection;

struct CfgInfoDetectorCctrl {
	CfgInfoBaseCctrl cfgInfoBaseDet;
	int channelNo;
	char *modelType;
};
typedef struct CfgInfoDetectorCctrl CfgInfoDetectorCctrl;

struct CfgDetectorParamCctrl {
	CfgInfoDetectorCctrl base;
	float SmothingFactorUp;
	float SmothingFactorDown;
	int Mexwainterval;
};
typedef struct CfgDetectorParamCctrl CfgDetectorParamCctrl;

enum CfgIntersectionControllerTypeCctrl {
	ICT_UNKNOWN = 0,
	ICT_C_10_L_61 = 61,
	ICT_C_10_H_62 = 62,
	ICT_C_10_LX_63 = 63,
	ICT_C_10_HX_64 = 64,
	ICT_C_10_V_65 = 65,
	ICT_C_10_VX_66 = 66,
};
typedef enum CfgIntersectionControllerTypeCctrl CfgIntersectionControllerTypeCctrl;

struct CfgGeneralParamCctrl {
	enum CfgIntersectionControllerTypeCctrl controllerType;
	char *name;
	int tccNo;
	int guiNo;
	int fnr;
	int systemPulse_ms;
	char *centerType;
};
typedef struct CfgGeneralParamCctrl CfgGeneralParamCctrl;

struct SelectedConfig {
	CfgSelector selector;
	union {
		struct {
			u_int sgInfos_len;
			CfgSgInfo *sgInfos_val;
		} sgInfos;
		struct {
			u_int sgDetParams_len;
			CfgSgDetParam *sgDetParams_val;
		} sgDetParams;
		struct {
			u_int stages_len;
			CfgStage *stages_val;
		} stages;
		struct {
			u_int stageSequencePlans2_len;
			CfgStageSequencePlan2 *stageSequencePlans2_val;
		} stageSequencePlans2;
		int systemPulseMs;
		CfgSyncInfoCctrl syncInfo;
		struct {
			u_int igTables_len;
			CfgInterGreenTimeTableCctrl *igTables_val;
		} igTables;
		struct {
			u_int sgInfos2_len;
			CfgSgInfo2CCtrl *sgInfos2_val;
		} sgInfos2;
		struct {
			u_int signalplanInfos_len;
			CfgSignalplanInfoCCtrl *signalplanInfos_val;
		} signalplanInfos;
		struct {
			u_int detectorParams_len;
			CfgDetectorParamCctrl *detectorParams_val;
		} detectorParams;
		CfgGeneralParamCctrl generalParams;
		enum RetCodeCctrl ret;
		enum RetCodeCctrl ret1;
	} SelectedConfig_u;
};
typedef struct SelectedConfig SelectedConfig;

struct SgHeadColorCctrl {
	char *color;
};
typedef struct SgHeadColorCctrl SgHeadColorCctrl;

struct CfgInfoSignalHeadCctrl {
	CfgInfoBaseCctrl cfgInfoBaseSignalHead;
	struct {
		u_int chamberColors_len;
		SgHeadColorCctrl *chamberColors_val;
	} chamberColors;
};
typedef struct CfgInfoSignalHeadCctrl CfgInfoSignalHeadCctrl;

struct CfgInfoSignalGroupCctrl {
	CfgInfoBaseCctrl cfgInfoBaseSignalGroup;
	char *sgType;
	char *sgDetailType;
	struct {
		u_int cfgInfoSignalHead_len;
		CfgInfoSignalHeadCctrl *cfgInfoSignalHead_val;
	} cfgInfoSignalHead;
};
typedef struct CfgInfoSignalGroupCctrl CfgInfoSignalGroupCctrl;

struct CfgInfoSignalPlanCctrl {
	CfgInfoBaseCctrl cfgInfoBaseSignalPlan;
	int tu;
	int gsp;
	int cycleTimeMonitorThreshold_100ms;
	bool_t isSynchronized;
};
typedef struct CfgInfoSignalPlanCctrl CfgInfoSignalPlanCctrl;

enum CfgInfoSelector {
	CS_CfgInfoError = 0,
	CS_CfgInfoIntersection = 1,
	CS_CfgInfoPartialIntersections = 2,
	CS_CfgInfoSignalingGroups = 3,
	CS_CfgInfoSignalPlans = 4,
	CS_CfgInfoDetectors = 5,
	CS_CfgInfoSubsystem = 6,
	CS_CfgInfoConnection = 7,
	CS_CfgInfoSGCctrl = 8,
	CS_CfgInfoSPCctrl = 9,
	CS_CfgInfoDetCctrl = 10,
};
typedef enum CfgInfoSelector CfgInfoSelector;

struct SelectedCfgInfo {
	CfgInfoSelector selector;
	union {
		CfgInfoBaseCctrl infoIntersection;
		struct {
			u_int partialIntersections_len;
			CfgInfoBaseCctrl *partialIntersections_val;
		} partialIntersections;
		struct {
			u_int signalingGroups_len;
			CfgInfoBaseCctrl *signalingGroups_val;
		} signalingGroups;
		struct {
			u_int signalPlans_len;
			CfgInfoBaseCctrl *signalPlans_val;
		} signalPlans;
		struct {
			u_int cfgDetectors_len;
			CfgInfoBaseCctrl *cfgDetectors_val;
		} cfgDetectors;
		CfgInfoBaseCctrl cfgSubs;
		CfgInfoConnection cfgCon;
		struct {
			u_int cfgSignalGroups_len;
			CfgInfoSignalGroupCctrl *cfgSignalGroups_val;
		} cfgSignalGroups;
		struct {
			u_int cfgSignalPlans_len;
			CfgInfoSignalPlanCctrl *cfgSignalPlans_val;
		} cfgSignalPlans;
		struct {
			u_int cfgDets_len;
			CfgInfoDetectorCctrl *cfgDets_val;
		} cfgDets;
		enum RetCodeCctrl ret;
		enum RetCodeCctrl ret1;
	} SelectedCfgInfo_u;
};
typedef struct SelectedCfgInfo SelectedCfgInfo;

struct OitdCctrl {
	int member;
	int otype;
	int index;
};
typedef struct OitdCctrl OitdCctrl;

typedef struct {
	u_int OitdCctrlA_len;
	OitdCctrl *OitdCctrlA_val;
} OitdCctrlA;

struct DeviceValueCctrl {
	OitdCctrl oitd;
	quad_t tickTime;
	int value;
};
typedef struct DeviceValueCctrl DeviceValueCctrl;

struct DeviceValuesCctrl {
	quad_t timestamp;
	struct {
		u_int dv_len;
		DeviceValueCctrl *dv_val;
	} dv;
};
typedef struct DeviceValuesCctrl DeviceValuesCctrl;

struct NlsElementCctrl {
	char *key;
	char *value;
};
typedef struct NlsElementCctrl NlsElementCctrl;

struct NlsMappingCctrl {
	char *lang;
	struct {
		u_int map_len;
		NlsElementCctrl *map_val;
	} map;
};
typedef struct NlsMappingCctrl NlsMappingCctrl;

typedef struct {
	u_int NlsMappingsCctrl_len;
	NlsMappingCctrl *NlsMappingsCctrl_val;
} NlsMappingsCctrl;

enum DeviceValueIndexType {
	DVI_Fd = 1,
	DVI_Detector = 2,
	DVI_SG = 3,
	DVI_SignalProgram = 4,
	DVI_Stage = 5,
	DVI_PartialIntersection = 6,
	DVI_Output = 7,
	DVI_PublicTransportCP = 10,
	DVI_PublicTransportGroup = 11,
	DVI_PublicTransportSgGroup = 12,
	DVI_other = 99,
};
typedef enum DeviceValueIndexType DeviceValueIndexType;

struct DeviceValueTypeCctrl {
	char *name;
	char *longName;
	char *description;
	int member;
	int otype;
	enum DeviceValueIndexType dvit;
	int minIndex;
	int maxIndex;
	int minValue;
	int maxValue;
};
typedef struct DeviceValueTypeCctrl DeviceValueTypeCctrl;

typedef struct {
	u_int DeviceValuesUsedIndicesCctrl_len;
	int *DeviceValuesUsedIndicesCctrl_val;
} DeviceValuesUsedIndicesCctrl;

struct DeviceValuesMetaDataCctrl {
	enum UnitId providerType;
	char *name;
	char *vers;
	struct {
		u_int dvt_len;
		DeviceValueTypeCctrl *dvt_val;
	} dvt;
};
typedef struct DeviceValuesMetaDataCctrl DeviceValuesMetaDataCctrl;

typedef struct {
	u_int DeviceValuesMetaDataCctrlA_len;
	DeviceValuesMetaDataCctrl *DeviceValuesMetaDataCctrlA_val;
} DeviceValuesMetaDataCctrlA;

struct CantoNetConfigDtoCctrl {
	char *profileType;
	char *profileDetails;
	int upstreamSpeed;
	int downstreamSpeed;
	char *vpnGateway;
	int vpnPortNumber;
	char *vpnProtocol;
};
typedef struct CantoNetConfigDtoCctrl CantoNetConfigDtoCctrl;

struct CantoNetConfigCctrl {
	RetCodeCctrl retCode;
	union {
		CantoNetConfigDtoCctrl cantoNetConfig;
	} CantoNetConfigCctrl_u;
};
typedef struct CantoNetConfigCctrl CantoNetConfigCctrl;

struct MkjtricActuationVersionCctrl {
	char *taName;
	char *taVersion;
};
typedef struct MkjtricActuationVersionCctrl MkjtricActuationVersionCctrl;

struct VersionsDtoCctrl {
	char *type;
	char *customerName;
	int configVersion;
	int planningVersion;
	int configBuildNo;
	char *fwVersion;
	char *cbcVersion;
	char *chxVersion;
	char *cmuVersion;
	struct {
		u_int taVersions_len;
		MkjtricActuationVersionCctrl *taVersions_val;
	} taVersions;
};
typedef struct VersionsDtoCctrl VersionsDtoCctrl;

struct VersionsCctrl {
	RetCodeCctrl retCode;
	union {
		VersionsDtoCctrl dto;
	} VersionsCctrl_u;
};
typedef struct VersionsCctrl VersionsCctrl;

enum ProcessControl {
	PC_start = 0,
	PC_stop = 1,
	PC_restart = 2,
};
typedef enum ProcessControl ProcessControl;

enum ArchiveSelectorCctrl {
	AS_NoArchive = 0,
	AS_ActualStatus = 1,
	AS_StandardMessage = 2,
	AS_CommonStates = 11,
	AS_LampStates = 12,
	AS_DetectorStates = 13,
	AS_SignalIndications = 21,
	AS_DetectorValues = 22,
	AS_DeviceValues = 23,
	AS_DetectorAggregation = 24,
	AS_Amli = 25,
};
typedef enum ArchiveSelectorCctrl ArchiveSelectorCctrl;

struct ArchiveKeysCctrl {
	quad_t timeStamp;
	quad_t tickTimeOfLastChange;
	quad_t primaryKey;
};
typedef struct ArchiveKeysCctrl ArchiveKeysCctrl;

struct ActualStatusDtoCctrl {
	ArchiveKeysCctrl keys;
	ActualStatusCctrl status;
};
typedef struct ActualStatusDtoCctrl ActualStatusDtoCctrl;

struct StandardMessageDtoCctrl {
	ArchiveKeysCctrl keys;
	int transactionNo;
	int member;
	int otype;
	int severity;
	char *name;
	struct {
		u_int parameters_len;
		MsgParameterCctrl *parameters_val;
	} parameters;
};
typedef struct StandardMessageDtoCctrl StandardMessageDtoCctrl;

struct DeviceValuesDtoCctrl {
	ArchiveKeysCctrl keys;
	struct {
		u_int dv_len;
		DeviceValueCctrl *dv_val;
	} dv;
};
typedef struct DeviceValuesDtoCctrl DeviceValuesDtoCctrl;

struct SignalIndicationsDtoCctrl {
	ArchiveKeysCctrl keys;
	struct SignalIndicationsCctrl signalIndications;
};
typedef struct SignalIndicationsDtoCctrl SignalIndicationsDtoCctrl;

struct DetectorValuesDtoCctrl {
	ArchiveKeysCctrl keys;
	struct {
		u_int detectorValues_len;
		DetRawValuesGradedCctrl *detectorValues_val;
	} detectorValues;
};
typedef struct DetectorValuesDtoCctrl DetectorValuesDtoCctrl;

struct DetectorAggregationDtoCctrl {
	ArchiveKeysCctrl keys;
	int cycleLength;
	bool_t isFixedCycle;
	struct {
		u_int aggregationEntries_len;
		DetectorAggregationCctrl *aggregationEntries_val;
	} aggregationEntries;
};
typedef struct DetectorAggregationDtoCctrl DetectorAggregationDtoCctrl;

struct LampStatesDtoCctrl {
	ArchiveKeysCctrl keys;
	struct {
		u_int lampStates_len;
		LampStatusCctrl *lampStates_val;
	} lampStates;
};
typedef struct LampStatesDtoCctrl LampStatesDtoCctrl;

struct DetectorStatesDtoCctrl {
	ArchiveKeysCctrl keys;
	struct {
		u_int detectorStates_len;
		DetStatusCctrl *detectorStates_val;
	} detectorStates;
};
typedef struct DetectorStatesDtoCctrl DetectorStatesDtoCctrl;

struct CommonStatesDtoCctrl {
	ArchiveKeysCctrl keys;
	struct {
		u_int commonStates_len;
		CommonStatusCctrl *commonStates_val;
	} commonStates;
};
typedef struct CommonStatesDtoCctrl CommonStatesDtoCctrl;

enum R09AttrSelCctrl {
	R09_Imbalance = 0,
	R09_Priority = 1,
	R09_ManDir = 2,
	R09_VehicleLen = 3,
	R09_VehicleNo = 4,
	R09_CompanyNo = 5,
	R09_PtDetNo = 6,
	R09_SignalGroup = 7,
	R09_PtDirectionNo = 8,
	R09_Unknown = 255,
};
typedef enum R09AttrSelCctrl R09AttrSelCctrl;

struct R09AttributeCctrl {
	R09AttrSelCctrl selector;
	int value;
};
typedef struct R09AttributeCctrl R09AttributeCctrl;

enum RideEventSourceCctrl {
	RESC_AFD = 0,
	RESC_Det = 1,
	RESC_ITCS = 2,
	RESC_RideManager = 3,
	RESC_SimGui = 4,
	RESC_Ta = 5,
	RESC_unknown = 255,
};
typedef enum RideEventSourceCctrl RideEventSourceCctrl;

struct RideEventCctrl {
	RideEventSourceCctrl source;
	int rpNo;
	int lineNo;
	int runNo;
	int destinationNo;
	struct {
		u_int attrs_len;
		R09AttributeCctrl *attrs_val;
	} attrs;
};
typedef struct RideEventCctrl RideEventCctrl;

enum AmliEventTypeCctrl {
	AET_CheckIn = 0,
	AET_CheckOutRaw = 1,
	AET_CheckOutAmli = 2,
	AET_EmergencyCheckIn = 3,
	AET_ForcedCheckOut = 4,
	AET_Blocked = 5,
	AET_unknown = 15,
};
typedef enum AmliEventTypeCctrl AmliEventTypeCctrl;

enum AmliCheckOutTypeCctrl {
	ACOR_CheckIn = 0,
	ACOR_OK = 1,
	ACOR_TooLate = 2,
	ACOR_Off = 3,
	ACOR_SwitchOnOk = 4,
	ACOR_SwitchOnNA = 5,
	ACOR_NotAffected = 6,
	ACOR_StageExtended = 7,
	ACOR_CheckOutByNextNA = 8,
	ACOR_StageUnmodified = 9,
	ACOR_CheckOutByNext = 10,
	ACOR_unknown = 255,
};
typedef enum AmliCheckOutTypeCctrl AmliCheckOutTypeCctrl;

struct AmliDtoCctrl {
	ArchiveKeysCctrl keys;
	RideEventCctrl event;
	int greenTime;
	bool_t ptModActive;
	int tx;
	int spNo;
	int actStage;
	int nextStage;
	int travelTime;
	int txGNS;
	int txGNE;
	int amliTimeout;
	int ptDirNo;
	AmliEventTypeCctrl type;
	AmliCheckOutTypeCctrl coType;
};
typedef struct AmliDtoCctrl AmliDtoCctrl;

struct ArchiveDtoCctrl {
	ArchiveSelectorCctrl selector;
	union {
		ActualStatusDtoCctrl asDto;
		StandardMessageDtoCctrl smDto;
		CommonStatesDtoCctrl csDto;
		LampStatesDtoCctrl lsDto;
		DetectorStatesDtoCctrl dsDto;
		DetectorValuesDtoCctrl dvDto;
		SignalIndicationsDtoCctrl siDto;
		DeviceValuesDtoCctrl devVDto;
		DetectorAggregationDtoCctrl daDto;
		AmliDtoCctrl amDto;
	} ArchiveDtoCctrl_u;
};
typedef struct ArchiveDtoCctrl ArchiveDtoCctrl;

struct ArchiveResultCctrl {
	RetCodeCctrl retCode;
	union {
		ArchiveDtoCctrl dto;
	} ArchiveResultCctrl_u;
};
typedef struct ArchiveResultCctrl ArchiveResultCctrl;

struct ArchiveResultArrayCctrl {
	RetCodeCctrl retCode;
	union {
		struct {
			u_int dtos_len;
			ArchiveDtoCctrl *dtos_val;
		} dtos;
	} ArchiveResultArrayCctrl_u;
};
typedef struct ArchiveResultArrayCctrl ArchiveResultArrayCctrl;

struct ArchiveSubscribeInfoCctrl {
	enum ArchiveSelectorCctrl selector;
	int count;
};
typedef struct ArchiveSubscribeInfoCctrl ArchiveSubscribeInfoCctrl;

struct TdtSubscriptionInfoCctrl {
	MkjtricDataTypeCctrl tdt;
	union {
		ArchiveSubscribeInfoCctrl archiveInfo;
		bool_t withRedGreenStates;
	} TdtSubscriptionInfoCctrl_u;
};
typedef struct TdtSubscriptionInfoCctrl TdtSubscriptionInfoCctrl;

typedef struct {
	u_int R09TelegramCctrl_len;
	char *R09TelegramCctrl_val;
} R09TelegramCctrl;

typedef struct {
	u_int AmliDtosCctrl_len;
	AmliDtoCctrl *AmliDtosCctrl_val;
} AmliDtosCctrl;

enum TypOfRideCctrl {
	TOR_IT = 1,
	TOR_PT = 2,
	TOR_Train = 3,
	TOR_Vip = 4,
	TOR_EVR = 5,
};
typedef enum TypOfRideCctrl TypOfRideCctrl;

enum RideExtensionSelector {
	RES_none = 0,
	RES_estimatedGreenDurationNeeded = 1,
	RES_priority = 2,
	RES_vehicleType = 3,
};
typedef enum RideExtensionSelector RideExtensionSelector;

struct RideExtensionCctrl {
	RideExtensionSelector selector;
	union {
		int estimatedGreenDurationNeeded;
		int priority;
		TypOfRideCctrl vehicleType;
	} RideExtensionCctrl_u;
};
typedef struct RideExtensionCctrl RideExtensionCctrl;

struct IntersectionRideCctrl {
	quad_t id;
	int ptDirectionNo;
	int ptSgNo;
	quad_t estimatedStartTimeOfGreen;
	struct {
		u_int extensionList_len;
		RideExtensionCctrl *extensionList_val;
	} extensionList;
};
typedef struct IntersectionRideCctrl IntersectionRideCctrl;

struct IntersectionRidesCctrl {
	struct {
		u_int activeRideList_len;
		struct IntersectionRideCctrl *activeRideList_val;
	} activeRideList;
	quad_t timeOfLastUpdate;
};
typedef struct IntersectionRidesCctrl IntersectionRidesCctrl;

enum CycleTimelineEntryTypeCctrl {
	CTE_Cyclic = 0,
	CTE_Stalling = 1,
	CTE_Invalid = 2,
};
typedef enum CycleTimelineEntryTypeCctrl CycleTimelineEntryTypeCctrl;

struct CteCyclicCctrl {
	int cycleTime;
	quad_t cycleStartTime;
};
typedef struct CteCyclicCctrl CteCyclicCctrl;

struct CteStallingCctrl {
	int cycleTimeCounter;
};
typedef struct CteStallingCctrl CteStallingCctrl;

struct CteSpecificCctrl {
	CycleTimelineEntryTypeCctrl cteType;
	union {
		CteCyclicCctrl cyclic;
		CteStallingCctrl stalling;
	} CteSpecificCctrl_u;
};
typedef struct CteSpecificCctrl CteSpecificCctrl;

struct CycleTimelineEntryCctrl {
	quad_t startTick;
	int prio;
	int signalProgram;
	int signalProgramSysJobId;
	CteSpecificCctrl s;
};
typedef struct CycleTimelineEntryCctrl CycleTimelineEntryCctrl;

struct CycleTimelineCctrl {
	quad_t baseTick;
	struct {
		u_int entries_len;
		CycleTimelineEntryCctrl *entries_val;
	} entries;
};
typedef struct CycleTimelineCctrl CycleTimelineCctrl;

enum TaLockStateCctrl {
	TLS_NOT_AVAILABLE = 0,
	TLS_LOCK = 1,
	TLS_UNLOCK = 2,
	TLS_DO_NOT_CARE = 3,
};
typedef enum TaLockStateCctrl TaLockStateCctrl;

struct TaLocksCctrl {
	TaLockStateCctrl subIntersection[4];
};
typedef struct TaLocksCctrl TaLocksCctrl;

struct detstates_8_argument {
	DetRawValuesExchg values;
	int seqNr;
};
typedef struct detstates_8_argument detstates_8_argument;

struct actualsignalindications_8_argument {
	SignalIndicationsCctrl values;
	int seqNr;
};
typedef struct actualsignalindications_8_argument actualsignalindications_8_argument;

struct actualstatus_8_argument {
	ActualStatusCctrl values;
	int seqNr;
};
typedef struct actualstatus_8_argument actualstatus_8_argument;

struct requestedstatus_8_argument {
	RequestedStatusCctrl rs;
	int seqNr;
};
typedef struct requestedstatus_8_argument requestedstatus_8_argument;

struct targetstage_8_argument {
	TargetStagePtr ts;
	quad_t devTick;
	int seqNr;
};
typedef struct targetstage_8_argument targetstage_8_argument;

struct intersectionrides_8_argument {
	IntersectionRidesCctrl rides;
	int seqNr;
};
typedef struct intersectionrides_8_argument intersectionrides_8_argument;

struct devicevalues_8_argument {
	DeviceValuesCctrl values;
	int seqNr;
};
typedef struct devicevalues_8_argument devicevalues_8_argument;

struct rideevent_8_argument {
	RideEventCctrl r09;
	int seqNr;
};
typedef struct rideevent_8_argument rideevent_8_argument;

struct reportallqueuesareidle_8_argument {
	bool_t isReportRequested;
	int seqNr;
};
typedef struct reportallqueuesareidle_8_argument reportallqueuesareidle_8_argument;

#define CcontrolDataReceiver 0x20000201
#define Sprint8R 8

#if defined(__STDC__) || defined(__cplusplus)
#define getReleasedVersionCcontrolDataReceiver 1
extern  enum clnt_stat getreleasedversionccontroldatareceiver_8(int *, CLIENT *);
extern  bool_t getreleasedversionccontroldatareceiver_8_svc(int *, struct svc_req *);
#define detStates 10
extern  enum clnt_stat detstates_8(DetRawValuesExchg , int , void *, CLIENT *);
extern  bool_t detstates_8_svc(DetRawValuesExchg , int , void *, struct svc_req *);
#define actualSignalIndications 11
extern  enum clnt_stat actualsignalindications_8(SignalIndicationsCctrl , int , void *, CLIENT *);
extern  bool_t actualsignalindications_8_svc(SignalIndicationsCctrl , int , void *, struct svc_req *);
#define actualStatus 12
extern  enum clnt_stat actualstatus_8(ActualStatusCctrl , int , void *, CLIENT *);
extern  bool_t actualstatus_8_svc(ActualStatusCctrl , int , void *, struct svc_req *);
#define requestedStatus 13
extern  enum clnt_stat requestedstatus_8(RequestedStatusCctrl , int , void *, CLIENT *);
extern  bool_t requestedstatus_8_svc(RequestedStatusCctrl , int , void *, struct svc_req *);
#define targetStage 14
extern  enum clnt_stat targetstage_8(TargetStagePtr , quad_t , int , void *, CLIENT *);
extern  bool_t targetstage_8_svc(TargetStagePtr , quad_t , int , void *, struct svc_req *);
#define intersectionRides 15
extern  enum clnt_stat intersectionrides_8(IntersectionRidesCctrl , int , void *, CLIENT *);
extern  bool_t intersectionrides_8_svc(IntersectionRidesCctrl , int , void *, struct svc_req *);
#define deviceValues 16
extern  enum clnt_stat devicevalues_8(DeviceValuesCctrl , int , void *, CLIENT *);
extern  bool_t devicevalues_8_svc(DeviceValuesCctrl , int , void *, struct svc_req *);
#define rideEvent 17
extern  enum clnt_stat rideevent_8(RideEventCctrl , int , void *, CLIENT *);
extern  bool_t rideevent_8_svc(RideEventCctrl , int , void *, struct svc_req *);
#define reportAllQueuesAreIdle 30
extern  enum clnt_stat reportallqueuesareidle_8(bool_t , int , void *, CLIENT *);
extern  bool_t reportallqueuesareidle_8_svc(bool_t , int , void *, struct svc_req *);
#define checkConfig 20
extern  enum clnt_stat checkconfig_8(int , CheckRespondCctrl *, CLIENT *);
extern  bool_t checkconfig_8_svc(int , CheckRespondCctrl *, struct svc_req *);
#define activate 21
extern  enum clnt_stat activate_8(int , void *, CLIENT *);
extern  bool_t activate_8_svc(int , void *, struct svc_req *);
#define cleanupConfigCheck 22
extern  enum clnt_stat cleanupconfigcheck_8(void *, CLIENT *);
extern  bool_t cleanupconfigcheck_8_svc(void *, struct svc_req *);
#define archiveInsertEvent 140
extern  enum clnt_stat archiveinsertevent_8(enum ArchiveSelectorCctrl , void *, CLIENT *);
extern  bool_t archiveinsertevent_8_svc(enum ArchiveSelectorCctrl , void *, struct svc_req *);
#define subscribeDeviceVariables 151
extern  enum clnt_stat subscribedevicevariables_8(OitdCctrlA , enum RetCodeCctrl *, CLIENT *);
extern  bool_t subscribedevicevariables_8_svc(OitdCctrlA , enum RetCodeCctrl *, struct svc_req *);
#define unSubscribeDeviceVariables 152
extern  enum clnt_stat unsubscribedevicevariables_8(OitdCctrlA , enum RetCodeCctrl *, CLIENT *);
extern  bool_t unsubscribedevicevariables_8_svc(OitdCctrlA , enum RetCodeCctrl *, struct svc_req *);
#define getDeviceValuesMetaData 153
extern  enum clnt_stat getdevicevaluesmetadata_8(DeviceValuesMetaDataCctrl *, CLIENT *);
extern  bool_t getdevicevaluesmetadata_8_svc(DeviceValuesMetaDataCctrl *, struct svc_req *);
#define getNlsDefinitions 160
extern  enum clnt_stat getnlsdefinitions_8(NlsMappingsCctrl *, CLIENT *);
extern  bool_t getnlsdefinitions_8_svc(NlsMappingsCctrl *, struct svc_req *);
extern int ccontroldatareceiver_8_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define getReleasedVersionCcontrolDataReceiver 1
extern  enum clnt_stat getreleasedversionccontroldatareceiver_8();
extern  bool_t getreleasedversionccontroldatareceiver_8_svc();
#define detStates 10
extern  enum clnt_stat detstates_8();
extern  bool_t detstates_8_svc();
#define actualSignalIndications 11
extern  enum clnt_stat actualsignalindications_8();
extern  bool_t actualsignalindications_8_svc();
#define actualStatus 12
extern  enum clnt_stat actualstatus_8();
extern  bool_t actualstatus_8_svc();
#define requestedStatus 13
extern  enum clnt_stat requestedstatus_8();
extern  bool_t requestedstatus_8_svc();
#define targetStage 14
extern  enum clnt_stat targetstage_8();
extern  bool_t targetstage_8_svc();
#define intersectionRides 15
extern  enum clnt_stat intersectionrides_8();
extern  bool_t intersectionrides_8_svc();
#define deviceValues 16
extern  enum clnt_stat devicevalues_8();
extern  bool_t devicevalues_8_svc();
#define rideEvent 17
extern  enum clnt_stat rideevent_8();
extern  bool_t rideevent_8_svc();
#define reportAllQueuesAreIdle 30
extern  enum clnt_stat reportallqueuesareidle_8();
extern  bool_t reportallqueuesareidle_8_svc();
#define checkConfig 20
extern  enum clnt_stat checkconfig_8();
extern  bool_t checkconfig_8_svc();
#define activate 21
extern  enum clnt_stat activate_8();
extern  bool_t activate_8_svc();
#define cleanupConfigCheck 22
extern  enum clnt_stat cleanupconfigcheck_8();
extern  bool_t cleanupconfigcheck_8_svc();
#define archiveInsertEvent 140
extern  enum clnt_stat archiveinsertevent_8();
extern  bool_t archiveinsertevent_8_svc();
#define subscribeDeviceVariables 151
extern  enum clnt_stat subscribedevicevariables_8();
extern  bool_t subscribedevicevariables_8_svc();
#define unSubscribeDeviceVariables 152
extern  enum clnt_stat unsubscribedevicevariables_8();
extern  bool_t unsubscribedevicevariables_8_svc();
#define getDeviceValuesMetaData 153
extern  enum clnt_stat getdevicevaluesmetadata_8();
extern  bool_t getdevicevaluesmetadata_8_svc();
#define getNlsDefinitions 160
extern  enum clnt_stat getnlsdefinitions_8();
extern  bool_t getnlsdefinitions_8_svc();
extern int ccontroldatareceiver_8_freeresult ();
#endif /* K&R C */

struct subscribe4tdt_8_argument {
	char *inetadr;
	int port;
	TdtSubscriptionInfoCctrl si;
};
typedef struct subscribe4tdt_8_argument subscribe4tdt_8_argument;

struct unsubscribe4tdt_8_argument {
	char *inetadr;
	int port;
	enum MkjtricDataTypeCctrl tdt;
};
typedef struct unsubscribe4tdt_8_argument unsubscribe4tdt_8_argument;

struct allqueuesareidle_8_argument {
	char *inetadr;
	int port;
	int seqNr;
};
typedef struct allqueuesareidle_8_argument allqueuesareidle_8_argument;

struct renew_8_argument {
	char *inetadr;
	int port;
};
typedef struct renew_8_argument renew_8_argument;

struct getearliesttime4stagetransition_8_argument {
	quad_t notBeforeTime;
	int toStage;
};
typedef struct getearliesttime4stagetransition_8_argument getearliesttime4stagetransition_8_argument;

struct checkadddesiredstageswitchingevents_8_argument {
	ExternalStageSwitchingEventArray stageSwitchingEvents;
	int allowedTypesOfViolation;
};
typedef struct checkadddesiredstageswitchingevents_8_argument checkadddesiredstageswitchingevents_8_argument;

struct setintersectionstate_8_argument {
	enum RequestedStatusPriorityCctrl priority;
	enum RequestedMainNodeStateCctrl value;
	int sysJobId;
	quad_t durationInMs;
};
typedef struct setintersectionstate_8_argument setintersectionstate_8_argument;

struct setsubintersectionstate_8_argument {
	enum RequestedStatusPriorityCctrl priority;
	enum RequestedNodeStateCctrl value;
	int sysJobId;
	int key;
	quad_t durationInMs;
};
typedef struct setsubintersectionstate_8_argument setsubintersectionstate_8_argument;

struct setsignalprogram_8_argument {
	enum RequestedStatusPriorityCctrl priority;
	int value;
	int sysJobId;
	quad_t durationInMs;
};
typedef struct setsignalprogram_8_argument setsignalprogram_8_argument;

struct setspecialintervention_8_argument {
	enum RequestedStatusPriorityCctrl priority;
	int value;
	int sysJobId;
	quad_t durationInMs;
};
typedef struct setspecialintervention_8_argument setspecialintervention_8_argument;

struct setmodvastate_8_argument {
	enum RequestedStatusPriorityCctrl priority;
	RequestedModificationStateCctrl value;
	int sysJobId;
	quad_t durationInMs;
};
typedef struct setmodvastate_8_argument setmodvastate_8_argument;

struct setmodivstate_8_argument {
	enum RequestedStatusPriorityCctrl priority;
	RequestedModificationStateCctrl value;
	int sysJobId;
	quad_t durationInMs;
};
typedef struct setmodivstate_8_argument setmodivstate_8_argument;

struct setmodoevstate_8_argument {
	enum RequestedStatusPriorityCctrl priority;
	RequestedModificationStateCctrl value;
	int sysJobId;
	quad_t durationInMs;
};
typedef struct setmodoevstate_8_argument setmodoevstate_8_argument;

struct setsynchronizationstate_8_argument {
	enum RequestedStatusPriorityCctrl priority;
	RequestedModificationStateCctrl value;
	int sysJobId;
	quad_t durationInMs;
};
typedef struct setsynchronizationstate_8_argument setsynchronizationstate_8_argument;

struct setprojectspecificmodstate_8_argument {
	enum RequestedStatusPriorityCctrl priority;
	RequestedModificationStateCctrl value;
	int sysJobId;
	int key;
	quad_t durationInMs;
};
typedef struct setprojectspecificmodstate_8_argument setprojectspecificmodstate_8_argument;

struct settaactualstatus_8_argument {
	char *host;
	int port;
	TTVModOnOffStateCctrlA taStates;
};
typedef struct settaactualstatus_8_argument settaactualstatus_8_argument;

struct getdraftcomponentparams_8_argument {
	char *componentName;
	char *inetadr;
	int port;
};
typedef struct getdraftcomponentparams_8_argument getdraftcomponentparams_8_argument;

struct setcltstatus_8_argument {
	char *host;
	int port;
	CltStatusMsgsCctrl status;
};
typedef struct setcltstatus_8_argument setcltstatus_8_argument;

struct archivegetlaterthan_8_argument {
	enum ArchiveSelectorCctrl selector;
	quad_t primaryKey;
	quad_t start;
	int maxCount;
};
typedef struct archivegetlaterthan_8_argument archivegetlaterthan_8_argument;

struct addmsgresetarchive_8_argument {
	int sysJobId;
	MsgParameterCctrl archiveType;
};
typedef struct addmsgresetarchive_8_argument addmsgresetarchive_8_argument;

struct setaggregationcycle_8_argument {
	int samplingInterval;
	int offset;
};
typedef struct setaggregationcycle_8_argument setaggregationcycle_8_argument;

struct forwardptrequest_8_argument {
	int sysJobId;
	R09TelegramCctrl telegram;
};
typedef struct forwardptrequest_8_argument forwardptrequest_8_argument;

struct getdraftintersectionversionasxmlstring_8_argument {
	char *inetadr;
	int port;
};
typedef struct getdraftintersectionversionasxmlstring_8_argument getdraftintersectionversionasxmlstring_8_argument;

struct getdraftsystemconfigversionasxmlstring_8_argument {
	char *inetadr;
	int port;
};
typedef struct getdraftsystemconfigversionasxmlstring_8_argument getdraftsystemconfigversionasxmlstring_8_argument;

struct getdraftselectedcfg_8_argument {
	char *inetadr;
	int port;
	enum CfgSelector arg3;
};
typedef struct getdraftselectedcfg_8_argument getdraftselectedcfg_8_argument;

struct registerasconfigconsumer_8_argument {
	char *inetadr;
	int port;
	int configTypeSet;
	enum UnitId uid;
};
typedef struct registerasconfigconsumer_8_argument registerasconfigconsumer_8_argument;

struct unregisterasconfigconsumer_8_argument {
	char *inetadr;
	int port;
	int configTypeSet;
};
typedef struct unregisterasconfigconsumer_8_argument unregisterasconfigconsumer_8_argument;

struct registerdevicevariableprovider_8_argument {
	char *inetadr;
	int port;
	int tcpPort;
	char *dvpName;
	char *dvpVersion;
};
typedef struct registerdevicevariableprovider_8_argument registerdevicevariableprovider_8_argument;

struct setsplcycletimecounterto_8_argument {
	int signalProgramNumber;
	int newCycleTimeCounterValue;
	quad_t atTickTime;
	int durationMs;
	int priority;
	InitiatorCCtrl initiator;
	int sysJobId;
};
typedef struct setsplcycletimecounterto_8_argument setsplcycletimecounterto_8_argument;

struct stallsplcycletimecounterto_8_argument {
	int signalProgramNumber;
	int newCycleTimeCounterValue;
	quad_t atTickTime;
	int durationMs;
	int priority;
	InitiatorCCtrl initiator;
	int sysJobId;
};
typedef struct stallsplcycletimecounterto_8_argument stallsplcycletimecounterto_8_argument;

struct invalidatecycletimecounterat_8_argument {
	int signalProgramNumber;
	quad_t atTickTime;
	int durationMs;
	int priority;
	InitiatorCCtrl initiator;
	int sysJobId;
};
typedef struct invalidatecycletimecounterat_8_argument invalidatecycletimecounterat_8_argument;

struct prepare4shutdown2update_8_argument {
	bool_t useEmergencyOpMode;
	int sysJobId;
};
typedef struct prepare4shutdown2update_8_argument prepare4shutdown2update_8_argument;

struct settalock_8_argument {
	char *host;
	int port;
	TaLocksCctrl locks;
};
typedef struct settalock_8_argument settalock_8_argument;

#define CcontrolService 0x20000202
#define Sprint8S 8

#if defined(__STDC__) || defined(__cplusplus)
#define getReleasedVersionCcontrolService 1
extern  enum clnt_stat getreleasedversionccontrolservice_8(int *, CLIENT *);
extern  bool_t getreleasedversionccontrolservice_8_svc(int *, struct svc_req *);
#define subscribe4Tdt 10
extern  enum clnt_stat subscribe4tdt_8(char *, int , TdtSubscriptionInfoCctrl , enum RetCodeCctrl *, CLIENT *);
extern  bool_t subscribe4tdt_8_svc(char *, int , TdtSubscriptionInfoCctrl , enum RetCodeCctrl *, struct svc_req *);
#define unsubscribe4Tdt 11
extern  enum clnt_stat unsubscribe4tdt_8(char *, int , enum MkjtricDataTypeCctrl , enum RetCodeCctrl *, CLIENT *);
extern  bool_t unsubscribe4tdt_8_svc(char *, int , enum MkjtricDataTypeCctrl , enum RetCodeCctrl *, struct svc_req *);
#define allQueuesAreIdle 95
extern  enum clnt_stat allqueuesareidle_8(char *, int , int , void *, CLIENT *);
extern  bool_t allqueuesareidle_8_svc(char *, int , int , void *, struct svc_req *);
#define renew 99
extern  enum clnt_stat renew_8(char *, int , enum RetCodeCctrl *, CLIENT *);
extern  bool_t renew_8_svc(char *, int , enum RetCodeCctrl *, struct svc_req *);
#define addDesiredSgSwitchingEvents 100
extern  enum clnt_stat adddesiredsgswitchingevents_8(ExternalSgSwitchingEventArray , void *, CLIENT *);
extern  bool_t adddesiredsgswitchingevents_8_svc(ExternalSgSwitchingEventArray , void *, struct svc_req *);
#define addDesiredStageSwitchingEvents 101
extern  enum clnt_stat adddesiredstageswitchingevents_8(ExternalStageSwitchingEventArray , void *, CLIENT *);
extern  bool_t adddesiredstageswitchingevents_8_svc(ExternalStageSwitchingEventArray , void *, struct svc_req *);
#define getEarliestTime4StageTransition 102
extern  enum clnt_stat getearliesttime4stagetransition_8(quad_t , int , quad_t *, CLIENT *);
extern  bool_t getearliesttime4stagetransition_8_svc(quad_t , int , quad_t *, struct svc_req *);
#define checkAddDesiredStageSwitchingEvents 103
extern  enum clnt_stat checkadddesiredstageswitchingevents_8(ExternalStageSwitchingEventArray , int , bool_t *, CLIENT *);
extern  bool_t checkadddesiredstageswitchingevents_8_svc(ExternalStageSwitchingEventArray , int , bool_t *, struct svc_req *);
#define setIntersectionState 110
extern  enum clnt_stat setintersectionstate_8(enum RequestedStatusPriorityCctrl , enum RequestedMainNodeStateCctrl , int , quad_t , enum RetCodeCctrl *, CLIENT *);
extern  bool_t setintersectionstate_8_svc(enum RequestedStatusPriorityCctrl , enum RequestedMainNodeStateCctrl , int , quad_t , enum RetCodeCctrl *, struct svc_req *);
#define setSubIntersectionState 111
extern  enum clnt_stat setsubintersectionstate_8(enum RequestedStatusPriorityCctrl , enum RequestedNodeStateCctrl , int , int , quad_t , enum RetCodeCctrl *, CLIENT *);
extern  bool_t setsubintersectionstate_8_svc(enum RequestedStatusPriorityCctrl , enum RequestedNodeStateCctrl , int , int , quad_t , enum RetCodeCctrl *, struct svc_req *);
#define setSignalProgram 112
extern  enum clnt_stat setsignalprogram_8(enum RequestedStatusPriorityCctrl , int , int , quad_t , enum RetCodeCctrl *, CLIENT *);
extern  bool_t setsignalprogram_8_svc(enum RequestedStatusPriorityCctrl , int , int , quad_t , enum RetCodeCctrl *, struct svc_req *);
#define setSpecialIntervention 113
extern  enum clnt_stat setspecialintervention_8(enum RequestedStatusPriorityCctrl , int , int , quad_t , enum RetCodeCctrl *, CLIENT *);
extern  bool_t setspecialintervention_8_svc(enum RequestedStatusPriorityCctrl , int , int , quad_t , enum RetCodeCctrl *, struct svc_req *);
#define setModVAState 115
extern  enum clnt_stat setmodvastate_8(enum RequestedStatusPriorityCctrl , RequestedModificationStateCctrl , int , quad_t , enum RetCodeCctrl *, CLIENT *);
extern  bool_t setmodvastate_8_svc(enum RequestedStatusPriorityCctrl , RequestedModificationStateCctrl , int , quad_t , enum RetCodeCctrl *, struct svc_req *);
#define setModIVState 116
extern  enum clnt_stat setmodivstate_8(enum RequestedStatusPriorityCctrl , RequestedModificationStateCctrl , int , quad_t , enum RetCodeCctrl *, CLIENT *);
extern  bool_t setmodivstate_8_svc(enum RequestedStatusPriorityCctrl , RequestedModificationStateCctrl , int , quad_t , enum RetCodeCctrl *, struct svc_req *);
#define setModOEVState 117
extern  enum clnt_stat setmodoevstate_8(enum RequestedStatusPriorityCctrl , RequestedModificationStateCctrl , int , quad_t , enum RetCodeCctrl *, CLIENT *);
extern  bool_t setmodoevstate_8_svc(enum RequestedStatusPriorityCctrl , RequestedModificationStateCctrl , int , quad_t , enum RetCodeCctrl *, struct svc_req *);
#define setSynchronizationState 121
extern  enum clnt_stat setsynchronizationstate_8(enum RequestedStatusPriorityCctrl , RequestedModificationStateCctrl , int , quad_t , enum RetCodeCctrl *, CLIENT *);
extern  bool_t setsynchronizationstate_8_svc(enum RequestedStatusPriorityCctrl , RequestedModificationStateCctrl , int , quad_t , enum RetCodeCctrl *, struct svc_req *);
#define setProjectspecificModState 118
extern  enum clnt_stat setprojectspecificmodstate_8(enum RequestedStatusPriorityCctrl , RequestedModificationStateCctrl , int , int , quad_t , enum RetCodeCctrl *, CLIENT *);
extern  bool_t setprojectspecificmodstate_8_svc(enum RequestedStatusPriorityCctrl , RequestedModificationStateCctrl , int , int , quad_t , enum RetCodeCctrl *, struct svc_req *);
#define dropPriority 119
extern  enum clnt_stat droppriority_8(enum RequestedStatusPriorityCctrl , void *, CLIENT *);
extern  bool_t droppriority_8_svc(enum RequestedStatusPriorityCctrl , void *, struct svc_req *);
#define clearAll 120
extern  enum clnt_stat clearall_8(void *, CLIENT *);
extern  bool_t clearall_8_svc(void *, struct svc_req *);
#define setTaActualStatus 130
extern  enum clnt_stat settaactualstatus_8(char *, int , TTVModOnOffStateCctrlA , enum RetCodeCctrl *, CLIENT *);
extern  bool_t settaactualstatus_8_svc(char *, int , TTVModOnOffStateCctrlA , enum RetCodeCctrl *, struct svc_req *);
#define getComponentParams 131
extern  enum clnt_stat getcomponentparams_8(char *, MkjtricActuationComponentParamsResult *, CLIENT *);
extern  bool_t getcomponentparams_8_svc(char *, MkjtricActuationComponentParamsResult *, struct svc_req *);
#define getDraftComponentParams 132
extern  enum clnt_stat getdraftcomponentparams_8(char *, char *, int , MkjtricActuationComponentParamsResult *, CLIENT *);
extern  bool_t getdraftcomponentparams_8_svc(char *, char *, int , MkjtricActuationComponentParamsResult *, struct svc_req *);
#define setCltStatus 135
extern  enum clnt_stat setcltstatus_8(char *, int , CltStatusMsgsCctrl , enum RetCodeCctrl *, CLIENT *);
extern  bool_t setcltstatus_8_svc(char *, int , CltStatusMsgsCctrl , enum RetCodeCctrl *, struct svc_req *);
#define archiveGetOldest 151
extern  enum clnt_stat archivegetoldest_8(enum ArchiveSelectorCctrl , ArchiveResultCctrl *, CLIENT *);
extern  bool_t archivegetoldest_8_svc(enum ArchiveSelectorCctrl , ArchiveResultCctrl *, struct svc_req *);
#define archiveGetYoungest 152
extern  enum clnt_stat archivegetyoungest_8(enum ArchiveSelectorCctrl , ArchiveResultCctrl *, CLIENT *);
extern  bool_t archivegetyoungest_8_svc(enum ArchiveSelectorCctrl , ArchiveResultCctrl *, struct svc_req *);
#define archiveGetLaterThan 153
extern  enum clnt_stat archivegetlaterthan_8(enum ArchiveSelectorCctrl , quad_t , quad_t , int , ArchiveResultArrayCctrl *, CLIENT *);
extern  bool_t archivegetlaterthan_8_svc(enum ArchiveSelectorCctrl , quad_t , quad_t , int , ArchiveResultArrayCctrl *, struct svc_req *);
#define addMsgResetArchive 159
extern  enum clnt_stat addmsgresetarchive_8(int , MsgParameterCctrl , enum RetCodeCctrl *, CLIENT *);
extern  bool_t addmsgresetarchive_8_svc(int , MsgParameterCctrl , enum RetCodeCctrl *, struct svc_req *);
#define getAggregationCycle 161
extern  enum clnt_stat getaggregationcycle_8(AggregationCycleResultCctrl *, CLIENT *);
extern  bool_t getaggregationcycle_8_svc(AggregationCycleResultCctrl *, struct svc_req *);
#define setAggregationCycle 162
extern  enum clnt_stat setaggregationcycle_8(int , int , enum RetCodeCctrl *, CLIENT *);
extern  bool_t setaggregationcycle_8_svc(int , int , enum RetCodeCctrl *, struct svc_req *);
#define getAggregationSignalling 163
extern  enum clnt_stat getaggregationsignalling_8(AggregationSignallingResultCctrl *, CLIENT *);
extern  bool_t getaggregationsignalling_8_svc(AggregationSignallingResultCctrl *, struct svc_req *);
#define setAggregationSignalling 164
extern  enum clnt_stat setaggregationsignalling_8(int , enum RetCodeCctrl *, CLIENT *);
extern  bool_t setaggregationsignalling_8_svc(int , enum RetCodeCctrl *, struct svc_req *);
#define forwardPtRequest 170
extern  enum clnt_stat forwardptrequest_8(int , R09TelegramCctrl , enum RetCodeCctrl *, CLIENT *);
extern  bool_t forwardptrequest_8_svc(int , R09TelegramCctrl , enum RetCodeCctrl *, struct svc_req *);
#define getIntersectionVersionAsXmlString 200
extern  enum clnt_stat getintersectionversionasxmlstring_8(char **, CLIENT *);
extern  bool_t getintersectionversionasxmlstring_8_svc(char **, struct svc_req *);
#define getSystemConfigVersionAsXmlString 201
extern  enum clnt_stat getsystemconfigversionasxmlstring_8(char **, CLIENT *);
extern  bool_t getsystemconfigversionasxmlstring_8_svc(char **, struct svc_req *);
#define getDraftIntersectionVersionAsXmlString 202
extern  enum clnt_stat getdraftintersectionversionasxmlstring_8(char *, int , char **, CLIENT *);
extern  bool_t getdraftintersectionversionasxmlstring_8_svc(char *, int , char **, struct svc_req *);
#define getDraftSystemConfigVersionAsXmlString 203
extern  enum clnt_stat getdraftsystemconfigversionasxmlstring_8(char *, int , char **, CLIENT *);
extern  bool_t getdraftsystemconfigversionasxmlstring_8_svc(char *, int , char **, struct svc_req *);
#define getVersions 208
extern  enum clnt_stat getversions_8(VersionsCctrl *, CLIENT *);
extern  bool_t getversions_8_svc(VersionsCctrl *, struct svc_req *);
#define getCantoNetConfig 209
extern  enum clnt_stat getcantonetconfig_8(CantoNetConfigCctrl *, CLIENT *);
extern  bool_t getcantonetconfig_8_svc(CantoNetConfigCctrl *, struct svc_req *);
#define getSelectedCfg 240
extern  enum clnt_stat getselectedcfg_8(enum CfgSelector , SelectedConfig *, CLIENT *);
extern  bool_t getselectedcfg_8_svc(enum CfgSelector , SelectedConfig *, struct svc_req *);
#define getDraftSelectedCfg 241
extern  enum clnt_stat getdraftselectedcfg_8(char *, int , enum CfgSelector , SelectedConfig *, CLIENT *);
extern  bool_t getdraftselectedcfg_8_svc(char *, int , enum CfgSelector , SelectedConfig *, struct svc_req *);
#define getSelectedCfgInfo 255
extern  enum clnt_stat getselectedcfginfo_8(enum CfgInfoSelector , SelectedCfgInfo *, CLIENT *);
extern  bool_t getselectedcfginfo_8_svc(enum CfgInfoSelector , SelectedCfgInfo *, struct svc_req *);
#define getConfigDataInfoZNr 258
extern  enum clnt_stat getconfigdatainfoznr_8(int *, CLIENT *);
extern  bool_t getconfigdatainfoznr_8_svc(int *, struct svc_req *);
#define getConfigDataInfoFNr 259
extern  enum clnt_stat getconfigdatainfofnr_8(int *, CLIENT *);
extern  bool_t getconfigdatainfofnr_8_svc(int *, struct svc_req *);
#define registerAsConfigConsumer 204
extern  enum clnt_stat registerasconfigconsumer_8(char *, int , int , enum UnitId , enum RetCodeCctrl *, CLIENT *);
extern  bool_t registerasconfigconsumer_8_svc(char *, int , int , enum UnitId , enum RetCodeCctrl *, struct svc_req *);
#define unregisterAsConfigConsumer 205
extern  enum clnt_stat unregisterasconfigconsumer_8(char *, int , int , enum RetCodeCctrl *, CLIENT *);
extern  bool_t unregisterasconfigconsumer_8_svc(char *, int , int , enum RetCodeCctrl *, struct svc_req *);
#define registerDeviceVariableProvider 210
extern  enum clnt_stat registerdevicevariableprovider_8(char *, int , int , char *, char *, enum RetCodeCctrl *, CLIENT *);
extern  bool_t registerdevicevariableprovider_8_svc(char *, int , int , char *, char *, enum RetCodeCctrl *, struct svc_req *);
#define setDeviceValues 211
extern  enum clnt_stat setdevicevalues_8(DeviceValuesCctrl , void *, CLIENT *);
extern  bool_t setdevicevalues_8_svc(DeviceValuesCctrl , void *, struct svc_req *);
#define subscribe4DeviceVariables 212
extern  enum clnt_stat subscribe4devicevariables_8(OitdCctrlA , enum RetCodeCctrl *, CLIENT *);
extern  bool_t subscribe4devicevariables_8_svc(OitdCctrlA , enum RetCodeCctrl *, struct svc_req *);
#define unSubscribe4DeviceVariables 213
extern  enum clnt_stat unsubscribe4devicevariables_8(OitdCctrlA , enum RetCodeCctrl *, CLIENT *);
extern  bool_t unsubscribe4devicevariables_8_svc(OitdCctrlA , enum RetCodeCctrl *, struct svc_req *);
#define unSubscribeAllDeviceVariables 214
extern  enum clnt_stat unsubscribealldevicevariables_8(enum RetCodeCctrl *, CLIENT *);
extern  bool_t unsubscribealldevicevariables_8_svc(enum RetCodeCctrl *, struct svc_req *);
#define checkIfOitdExists 215
extern  enum clnt_stat checkifoitdexists_8(OitdCctrl , bool_t *, CLIENT *);
extern  bool_t checkifoitdexists_8_svc(OitdCctrl , bool_t *, struct svc_req *);
#define getDeviceValuesMetaDataList 216
extern  enum clnt_stat getdevicevaluesmetadatalist_8(DeviceValuesMetaDataCctrlA *, CLIENT *);
extern  bool_t getdevicevaluesmetadatalist_8_svc(DeviceValuesMetaDataCctrlA *, struct svc_req *);
#define getDeviceValuesUsedIndex 217
extern  enum clnt_stat getdevicevaluesusedindex_8(DeviceValueIndexType , DeviceValuesUsedIndicesCctrl *, CLIENT *);
extern  bool_t getdevicevaluesusedindex_8_svc(DeviceValueIndexType , DeviceValuesUsedIndicesCctrl *, struct svc_req *);
#define setSplCycleTimeCounterTo 222
extern  enum clnt_stat setsplcycletimecounterto_8(int , int , quad_t , int , int , InitiatorCCtrl , int , enum RetCodeCctrl *, CLIENT *);
extern  bool_t setsplcycletimecounterto_8_svc(int , int , quad_t , int , int , InitiatorCCtrl , int , enum RetCodeCctrl *, struct svc_req *);
#define stallSplCycleTimeCounterTo 223
extern  enum clnt_stat stallsplcycletimecounterto_8(int , int , quad_t , int , int , InitiatorCCtrl , int , enum RetCodeCctrl *, CLIENT *);
extern  bool_t stallsplcycletimecounterto_8_svc(int , int , quad_t , int , int , InitiatorCCtrl , int , enum RetCodeCctrl *, struct svc_req *);
#define invalidateCycleTimeCounterAt 224
extern  enum clnt_stat invalidatecycletimecounterat_8(int , quad_t , int , int , InitiatorCCtrl , int , enum RetCodeCctrl *, CLIENT *);
extern  bool_t invalidatecycletimecounterat_8_svc(int , quad_t , int , int , InitiatorCCtrl , int , enum RetCodeCctrl *, struct svc_req *);
#define resetCycleMonitor 225
extern  enum clnt_stat resetcyclemonitor_8(int , enum RetCodeCctrl *, CLIENT *);
extern  bool_t resetcyclemonitor_8_svc(int , enum RetCodeCctrl *, struct svc_req *);
#define getCycleTimelineWithPriorityLT 226
extern  enum clnt_stat getcycletimelinewithprioritylt_8(int , CycleTimelineCctrl *, CLIENT *);
extern  bool_t getcycletimelinewithprioritylt_8_svc(int , CycleTimelineCctrl *, struct svc_req *);
#define resetFaultLock 230
extern  enum clnt_stat resetfaultlock_8(void *, CLIENT *);
extern  bool_t resetfaultlock_8_svc(void *, struct svc_req *);
#define prepare4Shutdown2Update 235
extern  enum clnt_stat prepare4shutdown2update_8(bool_t , int , char **, CLIENT *);
extern  bool_t prepare4shutdown2update_8_svc(bool_t , int , char **, struct svc_req *);
#define prepare4TaShutdown2Update 236
extern  enum clnt_stat prepare4tashutdown2update_8(int , char **, CLIENT *);
extern  bool_t prepare4tashutdown2update_8_svc(int , char **, struct svc_req *);
#define isFeatureLicensed 265
extern  enum clnt_stat isfeaturelicensed_8(char *, char **, CLIENT *);
extern  bool_t isfeaturelicensed_8_svc(char *, char **, struct svc_req *);
#define doControlCenterIf 270
extern  enum clnt_stat docontrolcenterif_8(enum ProcessControl , enum RetCodeCctrl *, CLIENT *);
extern  bool_t docontrolcenterif_8_svc(enum ProcessControl , enum RetCodeCctrl *, struct svc_req *);
#define setTaLock 284
extern  enum clnt_stat settalock_8(char *, int , TaLocksCctrl , enum RetCodeCctrl *, CLIENT *);
extern  bool_t settalock_8_svc(char *, int , TaLocksCctrl , enum RetCodeCctrl *, struct svc_req *);
#define processedAMLi 290
extern  enum clnt_stat processedamli_8(AmliDtosCctrl , enum RetCodeCctrl *, CLIENT *);
extern  bool_t processedamli_8_svc(AmliDtosCctrl , enum RetCodeCctrl *, struct svc_req *);
extern int ccontrolservice_8_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define getReleasedVersionCcontrolService 1
extern  enum clnt_stat getreleasedversionccontrolservice_8();
extern  bool_t getreleasedversionccontrolservice_8_svc();
#define subscribe4Tdt 10
extern  enum clnt_stat subscribe4tdt_8();
extern  bool_t subscribe4tdt_8_svc();
#define unsubscribe4Tdt 11
extern  enum clnt_stat unsubscribe4tdt_8();
extern  bool_t unsubscribe4tdt_8_svc();
#define allQueuesAreIdle 95
extern  enum clnt_stat allqueuesareidle_8();
extern  bool_t allqueuesareidle_8_svc();
#define renew 99
extern  enum clnt_stat renew_8();
extern  bool_t renew_8_svc();
#define addDesiredSgSwitchingEvents 100
extern  enum clnt_stat adddesiredsgswitchingevents_8();
extern  bool_t adddesiredsgswitchingevents_8_svc();
#define addDesiredStageSwitchingEvents 101
extern  enum clnt_stat adddesiredstageswitchingevents_8();
extern  bool_t adddesiredstageswitchingevents_8_svc();
#define getEarliestTime4StageTransition 102
extern  enum clnt_stat getearliesttime4stagetransition_8();
extern  bool_t getearliesttime4stagetransition_8_svc();
#define checkAddDesiredStageSwitchingEvents 103
extern  enum clnt_stat checkadddesiredstageswitchingevents_8();
extern  bool_t checkadddesiredstageswitchingevents_8_svc();
#define setIntersectionState 110
extern  enum clnt_stat setintersectionstate_8();
extern  bool_t setintersectionstate_8_svc();
#define setSubIntersectionState 111
extern  enum clnt_stat setsubintersectionstate_8();
extern  bool_t setsubintersectionstate_8_svc();
#define setSignalProgram 112
extern  enum clnt_stat setsignalprogram_8();
extern  bool_t setsignalprogram_8_svc();
#define setSpecialIntervention 113
extern  enum clnt_stat setspecialintervention_8();
extern  bool_t setspecialintervention_8_svc();
#define setModVAState 115
extern  enum clnt_stat setmodvastate_8();
extern  bool_t setmodvastate_8_svc();
#define setModIVState 116
extern  enum clnt_stat setmodivstate_8();
extern  bool_t setmodivstate_8_svc();
#define setModOEVState 117
extern  enum clnt_stat setmodoevstate_8();
extern  bool_t setmodoevstate_8_svc();
#define setSynchronizationState 121
extern  enum clnt_stat setsynchronizationstate_8();
extern  bool_t setsynchronizationstate_8_svc();
#define setProjectspecificModState 118
extern  enum clnt_stat setprojectspecificmodstate_8();
extern  bool_t setprojectspecificmodstate_8_svc();
#define dropPriority 119
extern  enum clnt_stat droppriority_8();
extern  bool_t droppriority_8_svc();
#define clearAll 120
extern  enum clnt_stat clearall_8();
extern  bool_t clearall_8_svc();
#define setTaActualStatus 130
extern  enum clnt_stat settaactualstatus_8();
extern  bool_t settaactualstatus_8_svc();
#define getComponentParams 131
extern  enum clnt_stat getcomponentparams_8();
extern  bool_t getcomponentparams_8_svc();
#define getDraftComponentParams 132
extern  enum clnt_stat getdraftcomponentparams_8();
extern  bool_t getdraftcomponentparams_8_svc();
#define setCltStatus 135
extern  enum clnt_stat setcltstatus_8();
extern  bool_t setcltstatus_8_svc();
#define archiveGetOldest 151
extern  enum clnt_stat archivegetoldest_8();
extern  bool_t archivegetoldest_8_svc();
#define archiveGetYoungest 152
extern  enum clnt_stat archivegetyoungest_8();
extern  bool_t archivegetyoungest_8_svc();
#define archiveGetLaterThan 153
extern  enum clnt_stat archivegetlaterthan_8();
extern  bool_t archivegetlaterthan_8_svc();
#define addMsgResetArchive 159
extern  enum clnt_stat addmsgresetarchive_8();
extern  bool_t addmsgresetarchive_8_svc();
#define getAggregationCycle 161
extern  enum clnt_stat getaggregationcycle_8();
extern  bool_t getaggregationcycle_8_svc();
#define setAggregationCycle 162
extern  enum clnt_stat setaggregationcycle_8();
extern  bool_t setaggregationcycle_8_svc();
#define getAggregationSignalling 163
extern  enum clnt_stat getaggregationsignalling_8();
extern  bool_t getaggregationsignalling_8_svc();
#define setAggregationSignalling 164
extern  enum clnt_stat setaggregationsignalling_8();
extern  bool_t setaggregationsignalling_8_svc();
#define forwardPtRequest 170
extern  enum clnt_stat forwardptrequest_8();
extern  bool_t forwardptrequest_8_svc();
#define getIntersectionVersionAsXmlString 200
extern  enum clnt_stat getintersectionversionasxmlstring_8();
extern  bool_t getintersectionversionasxmlstring_8_svc();
#define getSystemConfigVersionAsXmlString 201
extern  enum clnt_stat getsystemconfigversionasxmlstring_8();
extern  bool_t getsystemconfigversionasxmlstring_8_svc();
#define getDraftIntersectionVersionAsXmlString 202
extern  enum clnt_stat getdraftintersectionversionasxmlstring_8();
extern  bool_t getdraftintersectionversionasxmlstring_8_svc();
#define getDraftSystemConfigVersionAsXmlString 203
extern  enum clnt_stat getdraftsystemconfigversionasxmlstring_8();
extern  bool_t getdraftsystemconfigversionasxmlstring_8_svc();
#define getVersions 208
extern  enum clnt_stat getversions_8();
extern  bool_t getversions_8_svc();
#define getCantoNetConfig 209
extern  enum clnt_stat getcantonetconfig_8();
extern  bool_t getcantonetconfig_8_svc();
#define getSelectedCfg 240
extern  enum clnt_stat getselectedcfg_8();
extern  bool_t getselectedcfg_8_svc();
#define getDraftSelectedCfg 241
extern  enum clnt_stat getdraftselectedcfg_8();
extern  bool_t getdraftselectedcfg_8_svc();
#define getSelectedCfgInfo 255
extern  enum clnt_stat getselectedcfginfo_8();
extern  bool_t getselectedcfginfo_8_svc();
#define getConfigDataInfoZNr 258
extern  enum clnt_stat getconfigdatainfoznr_8();
extern  bool_t getconfigdatainfoznr_8_svc();
#define getConfigDataInfoFNr 259
extern  enum clnt_stat getconfigdatainfofnr_8();
extern  bool_t getconfigdatainfofnr_8_svc();
#define registerAsConfigConsumer 204
extern  enum clnt_stat registerasconfigconsumer_8();
extern  bool_t registerasconfigconsumer_8_svc();
#define unregisterAsConfigConsumer 205
extern  enum clnt_stat unregisterasconfigconsumer_8();
extern  bool_t unregisterasconfigconsumer_8_svc();
#define registerDeviceVariableProvider 210
extern  enum clnt_stat registerdevicevariableprovider_8();
extern  bool_t registerdevicevariableprovider_8_svc();
#define setDeviceValues 211
extern  enum clnt_stat setdevicevalues_8();
extern  bool_t setdevicevalues_8_svc();
#define subscribe4DeviceVariables 212
extern  enum clnt_stat subscribe4devicevariables_8();
extern  bool_t subscribe4devicevariables_8_svc();
#define unSubscribe4DeviceVariables 213
extern  enum clnt_stat unsubscribe4devicevariables_8();
extern  bool_t unsubscribe4devicevariables_8_svc();
#define unSubscribeAllDeviceVariables 214
extern  enum clnt_stat unsubscribealldevicevariables_8();
extern  bool_t unsubscribealldevicevariables_8_svc();
#define checkIfOitdExists 215
extern  enum clnt_stat checkifoitdexists_8();
extern  bool_t checkifoitdexists_8_svc();
#define getDeviceValuesMetaDataList 216
extern  enum clnt_stat getdevicevaluesmetadatalist_8();
extern  bool_t getdevicevaluesmetadatalist_8_svc();
#define getDeviceValuesUsedIndex 217
extern  enum clnt_stat getdevicevaluesusedindex_8();
extern  bool_t getdevicevaluesusedindex_8_svc();
#define setSplCycleTimeCounterTo 222
extern  enum clnt_stat setsplcycletimecounterto_8();
extern  bool_t setsplcycletimecounterto_8_svc();
#define stallSplCycleTimeCounterTo 223
extern  enum clnt_stat stallsplcycletimecounterto_8();
extern  bool_t stallsplcycletimecounterto_8_svc();
#define invalidateCycleTimeCounterAt 224
extern  enum clnt_stat invalidatecycletimecounterat_8();
extern  bool_t invalidatecycletimecounterat_8_svc();
#define resetCycleMonitor 225
extern  enum clnt_stat resetcyclemonitor_8();
extern  bool_t resetcyclemonitor_8_svc();
#define getCycleTimelineWithPriorityLT 226
extern  enum clnt_stat getcycletimelinewithprioritylt_8();
extern  bool_t getcycletimelinewithprioritylt_8_svc();
#define resetFaultLock 230
extern  enum clnt_stat resetfaultlock_8();
extern  bool_t resetfaultlock_8_svc();
#define prepare4Shutdown2Update 235
extern  enum clnt_stat prepare4shutdown2update_8();
extern  bool_t prepare4shutdown2update_8_svc();
#define prepare4TaShutdown2Update 236
extern  enum clnt_stat prepare4tashutdown2update_8();
extern  bool_t prepare4tashutdown2update_8_svc();
#define isFeatureLicensed 265
extern  enum clnt_stat isfeaturelicensed_8();
extern  bool_t isfeaturelicensed_8_svc();
#define doControlCenterIf 270
extern  enum clnt_stat docontrolcenterif_8();
extern  bool_t docontrolcenterif_8_svc();
#define setTaLock 284
extern  enum clnt_stat settalock_8();
extern  bool_t settalock_8_svc();
#define processedAMLi 290
extern  enum clnt_stat processedamli_8();
extern  bool_t processedamli_8_svc();
extern int ccontrolservice_8_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_MkjtricDataTypeCctrl (XDR *, MkjtricDataTypeCctrl*);
extern  bool_t xdr_DetDataStruct (XDR *, DetDataStruct*);
extern  bool_t xdr_DetValuesPerChannel (XDR *, DetValuesPerChannel*);
extern  bool_t xdr_DetectorErrorCodeCctrl (XDR *, DetectorErrorCodeCctrl*);
extern  bool_t xdr_DetStatusCctrl (XDR *, DetStatusCctrl*);
extern  bool_t xdr_DetRawValuesExchg (XDR *, DetRawValuesExchg*);
extern  bool_t xdr_RetCodeCctrl (XDR *, RetCodeCctrl*);
extern  bool_t xdr_IntersectionOperatingModeCctrl (XDR *, IntersectionOperatingModeCctrl*);
extern  bool_t xdr_SummaryAlarmCctrl (XDR *, SummaryAlarmCctrl*);
extern  bool_t xdr_TypeOfModificationCctrl (XDR *, TypeOfModificationCctrl*);
extern  bool_t xdr_SubIntersectionDetailStateCctrl (XDR *, SubIntersectionDetailStateCctrl*);
extern  bool_t xdr_ModOnOffStateCctrl (XDR *, ModOnOffStateCctrl*);
extern  bool_t xdr_IntersectionStateCctrl (XDR *, IntersectionStateCctrl*);
extern  bool_t xdr_TTVSubIntersectionDetailStateCctrl (XDR *, TTVSubIntersectionDetailStateCctrl*);
extern  bool_t xdr_TTVModOnOffStateCctrl (XDR *, TTVModOnOffStateCctrl*);
extern  bool_t xdr_TTVModOnOffStateCctrlA (XDR *, TTVModOnOffStateCctrlA*);
extern  bool_t xdr_ActualStatusCctrl (XDR *, ActualStatusCctrl*);
extern  bool_t xdr_MsgParamTypeInfoCctrl (XDR *, MsgParamTypeInfoCctrl*);
extern  bool_t xdr_MsgParamTypeRefCctrl (XDR *, MsgParamTypeRefCctrl*);
extern  bool_t xdr_MsgParamTypeEnumCctrl (XDR *, MsgParamTypeEnumCctrl*);
extern  bool_t xdr_MsgParameterValueCctrl (XDR *, MsgParameterValueCctrl*);
extern  bool_t xdr_MsgParameterCctrl (XDR *, MsgParameterCctrl*);
extern  bool_t xdr_CommonStatusCctrl (XDR *, CommonStatusCctrl*);
extern  bool_t xdr_LampFaultStateCctrl (XDR *, LampFaultStateCctrl*);
extern  bool_t xdr_LampFaultTimeConstraintsCctrl (XDR *, LampFaultTimeConstraintsCctrl*);
extern  bool_t xdr_LampStatusCctrl (XDR *, LampStatusCctrl*);
extern  bool_t xdr_SpeedVolumeCctrl (XDR *, SpeedVolumeCctrl*);
extern  bool_t xdr_DetectorAggregationCctrl (XDR *, DetectorAggregationCctrl*);
extern  bool_t xdr_AggregationCycleCctrl (XDR *, AggregationCycleCctrl*);
extern  bool_t xdr_AggregationCycleResultCctrl (XDR *, AggregationCycleResultCctrl*);
extern  bool_t xdr_AggregationSignallingResultCctrl (XDR *, AggregationSignallingResultCctrl*);
extern  bool_t xdr_DetRawValuesGradedCctrl (XDR *, DetRawValuesGradedCctrl*);
extern  bool_t xdr_SignalIndicationCctrl (XDR *, SignalIndicationCctrl*);
extern  bool_t xdr_SignalIndicationsCctrl (XDR *, SignalIndicationsCctrl*);
extern  bool_t xdr_MkjtricActuationComponentParams (XDR *, MkjtricActuationComponentParams*);
extern  bool_t xdr_MkjtricActuationComponentParamsResult (XDR *, MkjtricActuationComponentParamsResult*);
extern  bool_t xdr_InitiatorCCtrl (XDR *, InitiatorCCtrl*);
extern  bool_t xdr_ExternalSgSwitchingEvent (XDR *, ExternalSgSwitchingEvent*);
extern  bool_t xdr_ExternalSgSwitchingEventArray (XDR *, ExternalSgSwitchingEventArray*);
extern  bool_t xdr_ExternalStageSwitchingEvent (XDR *, ExternalStageSwitchingEvent*);
extern  bool_t xdr_ExternalStageSwitchingEventArray (XDR *, ExternalStageSwitchingEventArray*);
extern  bool_t xdr_TargetStage (XDR *, TargetStage*);
extern  bool_t xdr_TargetStagePtr (XDR *, TargetStagePtr*);
extern  bool_t xdr_TypeOfViolation (XDR *, TypeOfViolation*);
extern  bool_t xdr_RequestedModificationStateCctrl (XDR *, RequestedModificationStateCctrl*);
extern  bool_t xdr_RequestedNodeStateCctrl (XDR *, RequestedNodeStateCctrl*);
extern  bool_t xdr_RequestedMainNodeStateCctrl (XDR *, RequestedMainNodeStateCctrl*);
extern  bool_t xdr_RequestedStatusModNoCctrl (XDR *, RequestedStatusModNoCctrl*);
extern  bool_t xdr_TimeConstrainedTransactionTaggedIntValueCctrl (XDR *, TimeConstrainedTransactionTaggedIntValueCctrl*);
extern  bool_t xdr_TcTTVModOnOffStateCctrl (XDR *, TcTTVModOnOffStateCctrl*);
extern  bool_t xdr_RequestedStatusCctrl (XDR *, RequestedStatusCctrl*);
extern  bool_t xdr_RequestedStatusPriorityCctrl (XDR *, RequestedStatusPriorityCctrl*);
extern  bool_t xdr_ConfigType (XDR *, ConfigType*);
extern  bool_t xdr_CheckResult (XDR *, CheckResult*);
extern  bool_t xdr_UnitId (XDR *, UnitId*);
extern  bool_t xdr_SeverityCctrl (XDR *, SeverityCctrl*);
extern  bool_t xdr_CfgMessageCctrl (XDR *, CfgMessageCctrl*);
extern  bool_t xdr_CheckRespondCctrl (XDR *, CheckRespondCctrl*);
extern  bool_t xdr_CltStatusMsgsCctrl (XDR *, CltStatusMsgsCctrl*);
extern  bool_t xdr_SignalGroupDetailTypeCctrl (XDR *, SignalGroupDetailTypeCctrl*);
extern  bool_t xdr_CfgSgInfo (XDR *, CfgSgInfo*);
extern  bool_t xdr_CfgSgStateTransitionElementCCtrl (XDR *, CfgSgStateTransitionElementCCtrl*);
extern  bool_t xdr_CfgSgStateTransitionCCtrl (XDR *, CfgSgStateTransitionCCtrl*);
extern  bool_t xdr_CfgSgInfo2CCtrl (XDR *, CfgSgInfo2CCtrl*);
extern  bool_t xdr_CfgSgDetParam (XDR *, CfgSgDetParam*);
extern  bool_t xdr_CfgSignalisation (XDR *, CfgSignalisation*);
extern  bool_t xdr_CfgStage (XDR *, CfgStage*);
extern  bool_t xdr_CfgStageSequenceElement2 (XDR *, CfgStageSequenceElement2*);
extern  bool_t xdr_CfgStageTransitionSwitchingTime (XDR *, CfgStageTransitionSwitchingTime*);
extern  bool_t xdr_CfgStageTransition (XDR *, CfgStageTransition*);
extern  bool_t xdr_CfgStageSequencePlan2 (XDR *, CfgStageSequencePlan2*);
extern  bool_t xdr_CfgSignalplanInfoCCtrl (XDR *, CfgSignalplanInfoCCtrl*);
extern  bool_t xdr_ReCalculationMethodCctrl (XDR *, ReCalculationMethodCctrl*);
extern  bool_t xdr_SyncMethodCctrl (XDR *, SyncMethodCctrl*);
extern  bool_t xdr_CfgSyncInfoCctrl (XDR *, CfgSyncInfoCctrl*);
extern  bool_t xdr_CfgInterGreenTimeElementCctrl (XDR *, CfgInterGreenTimeElementCctrl*);
extern  bool_t xdr_CfgInterGreenTimeTableCctrl (XDR *, CfgInterGreenTimeTableCctrl*);
extern  bool_t xdr_CfgSelector (XDR *, CfgSelector*);
extern  bool_t xdr_CfgInfoBaseCctrl (XDR *, CfgInfoBaseCctrl*);
extern  bool_t xdr_CfgInfoConnection (XDR *, CfgInfoConnection*);
extern  bool_t xdr_CfgInfoDetectorCctrl (XDR *, CfgInfoDetectorCctrl*);
extern  bool_t xdr_CfgDetectorParamCctrl (XDR *, CfgDetectorParamCctrl*);
extern  bool_t xdr_CfgIntersectionControllerTypeCctrl (XDR *, CfgIntersectionControllerTypeCctrl*);
extern  bool_t xdr_CfgGeneralParamCctrl (XDR *, CfgGeneralParamCctrl*);
extern  bool_t xdr_SelectedConfig (XDR *, SelectedConfig*);
extern  bool_t xdr_SgHeadColorCctrl (XDR *, SgHeadColorCctrl*);
extern  bool_t xdr_CfgInfoSignalHeadCctrl (XDR *, CfgInfoSignalHeadCctrl*);
extern  bool_t xdr_CfgInfoSignalGroupCctrl (XDR *, CfgInfoSignalGroupCctrl*);
extern  bool_t xdr_CfgInfoSignalPlanCctrl (XDR *, CfgInfoSignalPlanCctrl*);
extern  bool_t xdr_CfgInfoSelector (XDR *, CfgInfoSelector*);
extern  bool_t xdr_SelectedCfgInfo (XDR *, SelectedCfgInfo*);
extern  bool_t xdr_OitdCctrl (XDR *, OitdCctrl*);
extern  bool_t xdr_OitdCctrlA (XDR *, OitdCctrlA*);
extern  bool_t xdr_DeviceValueCctrl (XDR *, DeviceValueCctrl*);
extern  bool_t xdr_DeviceValuesCctrl (XDR *, DeviceValuesCctrl*);
extern  bool_t xdr_NlsElementCctrl (XDR *, NlsElementCctrl*);
extern  bool_t xdr_NlsMappingCctrl (XDR *, NlsMappingCctrl*);
extern  bool_t xdr_NlsMappingsCctrl (XDR *, NlsMappingsCctrl*);
extern  bool_t xdr_DeviceValueIndexType (XDR *, DeviceValueIndexType*);
extern  bool_t xdr_DeviceValueTypeCctrl (XDR *, DeviceValueTypeCctrl*);
extern  bool_t xdr_DeviceValuesUsedIndicesCctrl (XDR *, DeviceValuesUsedIndicesCctrl*);
extern  bool_t xdr_DeviceValuesMetaDataCctrl (XDR *, DeviceValuesMetaDataCctrl*);
extern  bool_t xdr_DeviceValuesMetaDataCctrlA (XDR *, DeviceValuesMetaDataCctrlA*);
extern  bool_t xdr_CantoNetConfigDtoCctrl (XDR *, CantoNetConfigDtoCctrl*);
extern  bool_t xdr_CantoNetConfigCctrl (XDR *, CantoNetConfigCctrl*);
extern  bool_t xdr_MkjtricActuationVersionCctrl (XDR *, MkjtricActuationVersionCctrl*);
extern  bool_t xdr_VersionsDtoCctrl (XDR *, VersionsDtoCctrl*);
extern  bool_t xdr_VersionsCctrl (XDR *, VersionsCctrl*);
extern  bool_t xdr_ProcessControl (XDR *, ProcessControl*);
extern  bool_t xdr_ArchiveSelectorCctrl (XDR *, ArchiveSelectorCctrl*);
extern  bool_t xdr_ArchiveKeysCctrl (XDR *, ArchiveKeysCctrl*);
extern  bool_t xdr_ActualStatusDtoCctrl (XDR *, ActualStatusDtoCctrl*);
extern  bool_t xdr_StandardMessageDtoCctrl (XDR *, StandardMessageDtoCctrl*);
extern  bool_t xdr_DeviceValuesDtoCctrl (XDR *, DeviceValuesDtoCctrl*);
extern  bool_t xdr_SignalIndicationsDtoCctrl (XDR *, SignalIndicationsDtoCctrl*);
extern  bool_t xdr_DetectorValuesDtoCctrl (XDR *, DetectorValuesDtoCctrl*);
extern  bool_t xdr_DetectorAggregationDtoCctrl (XDR *, DetectorAggregationDtoCctrl*);
extern  bool_t xdr_LampStatesDtoCctrl (XDR *, LampStatesDtoCctrl*);
extern  bool_t xdr_DetectorStatesDtoCctrl (XDR *, DetectorStatesDtoCctrl*);
extern  bool_t xdr_CommonStatesDtoCctrl (XDR *, CommonStatesDtoCctrl*);
extern  bool_t xdr_R09AttrSelCctrl (XDR *, R09AttrSelCctrl*);
extern  bool_t xdr_R09AttributeCctrl (XDR *, R09AttributeCctrl*);
extern  bool_t xdr_RideEventSourceCctrl (XDR *, RideEventSourceCctrl*);
extern  bool_t xdr_RideEventCctrl (XDR *, RideEventCctrl*);
extern  bool_t xdr_AmliEventTypeCctrl (XDR *, AmliEventTypeCctrl*);
extern  bool_t xdr_AmliCheckOutTypeCctrl (XDR *, AmliCheckOutTypeCctrl*);
extern  bool_t xdr_AmliDtoCctrl (XDR *, AmliDtoCctrl*);
extern  bool_t xdr_ArchiveDtoCctrl (XDR *, ArchiveDtoCctrl*);
extern  bool_t xdr_ArchiveResultCctrl (XDR *, ArchiveResultCctrl*);
extern  bool_t xdr_ArchiveResultArrayCctrl (XDR *, ArchiveResultArrayCctrl*);
extern  bool_t xdr_ArchiveSubscribeInfoCctrl (XDR *, ArchiveSubscribeInfoCctrl*);
extern  bool_t xdr_TdtSubscriptionInfoCctrl (XDR *, TdtSubscriptionInfoCctrl*);
extern  bool_t xdr_R09TelegramCctrl (XDR *, R09TelegramCctrl*);
extern  bool_t xdr_AmliDtosCctrl (XDR *, AmliDtosCctrl*);
extern  bool_t xdr_TypOfRideCctrl (XDR *, TypOfRideCctrl*);
extern  bool_t xdr_RideExtensionSelector (XDR *, RideExtensionSelector*);
extern  bool_t xdr_RideExtensionCctrl (XDR *, RideExtensionCctrl*);
extern  bool_t xdr_IntersectionRideCctrl (XDR *, IntersectionRideCctrl*);
extern  bool_t xdr_IntersectionRidesCctrl (XDR *, IntersectionRidesCctrl*);
extern  bool_t xdr_CycleTimelineEntryTypeCctrl (XDR *, CycleTimelineEntryTypeCctrl*);
extern  bool_t xdr_CteCyclicCctrl (XDR *, CteCyclicCctrl*);
extern  bool_t xdr_CteStallingCctrl (XDR *, CteStallingCctrl*);
extern  bool_t xdr_CteSpecificCctrl (XDR *, CteSpecificCctrl*);
extern  bool_t xdr_CycleTimelineEntryCctrl (XDR *, CycleTimelineEntryCctrl*);
extern  bool_t xdr_CycleTimelineCctrl (XDR *, CycleTimelineCctrl*);
extern  bool_t xdr_TaLockStateCctrl (XDR *, TaLockStateCctrl*);
extern  bool_t xdr_TaLocksCctrl (XDR *, TaLocksCctrl*);
extern  bool_t xdr_detstates_8_argument (XDR *, detstates_8_argument*);
extern  bool_t xdr_actualsignalindications_8_argument (XDR *, actualsignalindications_8_argument*);
extern  bool_t xdr_actualstatus_8_argument (XDR *, actualstatus_8_argument*);
extern  bool_t xdr_requestedstatus_8_argument (XDR *, requestedstatus_8_argument*);
extern  bool_t xdr_targetstage_8_argument (XDR *, targetstage_8_argument*);
extern  bool_t xdr_intersectionrides_8_argument (XDR *, intersectionrides_8_argument*);
extern  bool_t xdr_devicevalues_8_argument (XDR *, devicevalues_8_argument*);
extern  bool_t xdr_rideevent_8_argument (XDR *, rideevent_8_argument*);
extern  bool_t xdr_reportallqueuesareidle_8_argument (XDR *, reportallqueuesareidle_8_argument*);
extern  bool_t xdr_subscribe4tdt_8_argument (XDR *, subscribe4tdt_8_argument*);
extern  bool_t xdr_unsubscribe4tdt_8_argument (XDR *, unsubscribe4tdt_8_argument*);
extern  bool_t xdr_allqueuesareidle_8_argument (XDR *, allqueuesareidle_8_argument*);
extern  bool_t xdr_renew_8_argument (XDR *, renew_8_argument*);
extern  bool_t xdr_getearliesttime4stagetransition_8_argument (XDR *, getearliesttime4stagetransition_8_argument*);
extern  bool_t xdr_checkadddesiredstageswitchingevents_8_argument (XDR *, checkadddesiredstageswitchingevents_8_argument*);
extern  bool_t xdr_setintersectionstate_8_argument (XDR *, setintersectionstate_8_argument*);
extern  bool_t xdr_setsubintersectionstate_8_argument (XDR *, setsubintersectionstate_8_argument*);
extern  bool_t xdr_setsignalprogram_8_argument (XDR *, setsignalprogram_8_argument*);
extern  bool_t xdr_setspecialintervention_8_argument (XDR *, setspecialintervention_8_argument*);
extern  bool_t xdr_setmodvastate_8_argument (XDR *, setmodvastate_8_argument*);
extern  bool_t xdr_setmodivstate_8_argument (XDR *, setmodivstate_8_argument*);
extern  bool_t xdr_setmodoevstate_8_argument (XDR *, setmodoevstate_8_argument*);
extern  bool_t xdr_setsynchronizationstate_8_argument (XDR *, setsynchronizationstate_8_argument*);
extern  bool_t xdr_setprojectspecificmodstate_8_argument (XDR *, setprojectspecificmodstate_8_argument*);
extern  bool_t xdr_settaactualstatus_8_argument (XDR *, settaactualstatus_8_argument*);
extern  bool_t xdr_getdraftcomponentparams_8_argument (XDR *, getdraftcomponentparams_8_argument*);
extern  bool_t xdr_setcltstatus_8_argument (XDR *, setcltstatus_8_argument*);
extern  bool_t xdr_archivegetlaterthan_8_argument (XDR *, archivegetlaterthan_8_argument*);
extern  bool_t xdr_addmsgresetarchive_8_argument (XDR *, addmsgresetarchive_8_argument*);
extern  bool_t xdr_setaggregationcycle_8_argument (XDR *, setaggregationcycle_8_argument*);
extern  bool_t xdr_forwardptrequest_8_argument (XDR *, forwardptrequest_8_argument*);
extern  bool_t xdr_getdraftintersectionversionasxmlstring_8_argument (XDR *, getdraftintersectionversionasxmlstring_8_argument*);
extern  bool_t xdr_getdraftsystemconfigversionasxmlstring_8_argument (XDR *, getdraftsystemconfigversionasxmlstring_8_argument*);
extern  bool_t xdr_getdraftselectedcfg_8_argument (XDR *, getdraftselectedcfg_8_argument*);
extern  bool_t xdr_registerasconfigconsumer_8_argument (XDR *, registerasconfigconsumer_8_argument*);
extern  bool_t xdr_unregisterasconfigconsumer_8_argument (XDR *, unregisterasconfigconsumer_8_argument*);
extern  bool_t xdr_registerdevicevariableprovider_8_argument (XDR *, registerdevicevariableprovider_8_argument*);
extern  bool_t xdr_setsplcycletimecounterto_8_argument (XDR *, setsplcycletimecounterto_8_argument*);
extern  bool_t xdr_stallsplcycletimecounterto_8_argument (XDR *, stallsplcycletimecounterto_8_argument*);
extern  bool_t xdr_invalidatecycletimecounterat_8_argument (XDR *, invalidatecycletimecounterat_8_argument*);
extern  bool_t xdr_prepare4shutdown2update_8_argument (XDR *, prepare4shutdown2update_8_argument*);
extern  bool_t xdr_settalock_8_argument (XDR *, settalock_8_argument*);

#else /* K&R C */
extern bool_t xdr_MkjtricDataTypeCctrl ();
extern bool_t xdr_DetDataStruct ();
extern bool_t xdr_DetValuesPerChannel ();
extern bool_t xdr_DetectorErrorCodeCctrl ();
extern bool_t xdr_DetStatusCctrl ();
extern bool_t xdr_DetRawValuesExchg ();
extern bool_t xdr_RetCodeCctrl ();
extern bool_t xdr_IntersectionOperatingModeCctrl ();
extern bool_t xdr_SummaryAlarmCctrl ();
extern bool_t xdr_TypeOfModificationCctrl ();
extern bool_t xdr_SubIntersectionDetailStateCctrl ();
extern bool_t xdr_ModOnOffStateCctrl ();
extern bool_t xdr_IntersectionStateCctrl ();
extern bool_t xdr_TTVSubIntersectionDetailStateCctrl ();
extern bool_t xdr_TTVModOnOffStateCctrl ();
extern bool_t xdr_TTVModOnOffStateCctrlA ();
extern bool_t xdr_ActualStatusCctrl ();
extern bool_t xdr_MsgParamTypeInfoCctrl ();
extern bool_t xdr_MsgParamTypeRefCctrl ();
extern bool_t xdr_MsgParamTypeEnumCctrl ();
extern bool_t xdr_MsgParameterValueCctrl ();
extern bool_t xdr_MsgParameterCctrl ();
extern bool_t xdr_CommonStatusCctrl ();
extern bool_t xdr_LampFaultStateCctrl ();
extern bool_t xdr_LampFaultTimeConstraintsCctrl ();
extern bool_t xdr_LampStatusCctrl ();
extern bool_t xdr_SpeedVolumeCctrl ();
extern bool_t xdr_DetectorAggregationCctrl ();
extern bool_t xdr_AggregationCycleCctrl ();
extern bool_t xdr_AggregationCycleResultCctrl ();
extern bool_t xdr_AggregationSignallingResultCctrl ();
extern bool_t xdr_DetRawValuesGradedCctrl ();
extern bool_t xdr_SignalIndicationCctrl ();
extern bool_t xdr_SignalIndicationsCctrl ();
extern bool_t xdr_MkjtricActuationComponentParams ();
extern bool_t xdr_MkjtricActuationComponentParamsResult ();
extern bool_t xdr_InitiatorCCtrl ();
extern bool_t xdr_ExternalSgSwitchingEvent ();
extern bool_t xdr_ExternalSgSwitchingEventArray ();
extern bool_t xdr_ExternalStageSwitchingEvent ();
extern bool_t xdr_ExternalStageSwitchingEventArray ();
extern bool_t xdr_TargetStage ();
extern bool_t xdr_TargetStagePtr ();
extern bool_t xdr_TypeOfViolation ();
extern bool_t xdr_RequestedModificationStateCctrl ();
extern bool_t xdr_RequestedNodeStateCctrl ();
extern bool_t xdr_RequestedMainNodeStateCctrl ();
extern bool_t xdr_RequestedStatusModNoCctrl ();
extern bool_t xdr_TimeConstrainedTransactionTaggedIntValueCctrl ();
extern bool_t xdr_TcTTVModOnOffStateCctrl ();
extern bool_t xdr_RequestedStatusCctrl ();
extern bool_t xdr_RequestedStatusPriorityCctrl ();
extern bool_t xdr_ConfigType ();
extern bool_t xdr_CheckResult ();
extern bool_t xdr_UnitId ();
extern bool_t xdr_SeverityCctrl ();
extern bool_t xdr_CfgMessageCctrl ();
extern bool_t xdr_CheckRespondCctrl ();
extern bool_t xdr_CltStatusMsgsCctrl ();
extern bool_t xdr_SignalGroupDetailTypeCctrl ();
extern bool_t xdr_CfgSgInfo ();
extern bool_t xdr_CfgSgStateTransitionElementCCtrl ();
extern bool_t xdr_CfgSgStateTransitionCCtrl ();
extern bool_t xdr_CfgSgInfo2CCtrl ();
extern bool_t xdr_CfgSgDetParam ();
extern bool_t xdr_CfgSignalisation ();
extern bool_t xdr_CfgStage ();
extern bool_t xdr_CfgStageSequenceElement2 ();
extern bool_t xdr_CfgStageTransitionSwitchingTime ();
extern bool_t xdr_CfgStageTransition ();
extern bool_t xdr_CfgStageSequencePlan2 ();
extern bool_t xdr_CfgSignalplanInfoCCtrl ();
extern bool_t xdr_ReCalculationMethodCctrl ();
extern bool_t xdr_SyncMethodCctrl ();
extern bool_t xdr_CfgSyncInfoCctrl ();
extern bool_t xdr_CfgInterGreenTimeElementCctrl ();
extern bool_t xdr_CfgInterGreenTimeTableCctrl ();
extern bool_t xdr_CfgSelector ();
extern bool_t xdr_CfgInfoBaseCctrl ();
extern bool_t xdr_CfgInfoConnection ();
extern bool_t xdr_CfgInfoDetectorCctrl ();
extern bool_t xdr_CfgDetectorParamCctrl ();
extern bool_t xdr_CfgIntersectionControllerTypeCctrl ();
extern bool_t xdr_CfgGeneralParamCctrl ();
extern bool_t xdr_SelectedConfig ();
extern bool_t xdr_SgHeadColorCctrl ();
extern bool_t xdr_CfgInfoSignalHeadCctrl ();
extern bool_t xdr_CfgInfoSignalGroupCctrl ();
extern bool_t xdr_CfgInfoSignalPlanCctrl ();
extern bool_t xdr_CfgInfoSelector ();
extern bool_t xdr_SelectedCfgInfo ();
extern bool_t xdr_OitdCctrl ();
extern bool_t xdr_OitdCctrlA ();
extern bool_t xdr_DeviceValueCctrl ();
extern bool_t xdr_DeviceValuesCctrl ();
extern bool_t xdr_NlsElementCctrl ();
extern bool_t xdr_NlsMappingCctrl ();
extern bool_t xdr_NlsMappingsCctrl ();
extern bool_t xdr_DeviceValueIndexType ();
extern bool_t xdr_DeviceValueTypeCctrl ();
extern bool_t xdr_DeviceValuesUsedIndicesCctrl ();
extern bool_t xdr_DeviceValuesMetaDataCctrl ();
extern bool_t xdr_DeviceValuesMetaDataCctrlA ();
extern bool_t xdr_CantoNetConfigDtoCctrl ();
extern bool_t xdr_CantoNetConfigCctrl ();
extern bool_t xdr_MkjtricActuationVersionCctrl ();
extern bool_t xdr_VersionsDtoCctrl ();
extern bool_t xdr_VersionsCctrl ();
extern bool_t xdr_ProcessControl ();
extern bool_t xdr_ArchiveSelectorCctrl ();
extern bool_t xdr_ArchiveKeysCctrl ();
extern bool_t xdr_ActualStatusDtoCctrl ();
extern bool_t xdr_StandardMessageDtoCctrl ();
extern bool_t xdr_DeviceValuesDtoCctrl ();
extern bool_t xdr_SignalIndicationsDtoCctrl ();
extern bool_t xdr_DetectorValuesDtoCctrl ();
extern bool_t xdr_DetectorAggregationDtoCctrl ();
extern bool_t xdr_LampStatesDtoCctrl ();
extern bool_t xdr_DetectorStatesDtoCctrl ();
extern bool_t xdr_CommonStatesDtoCctrl ();
extern bool_t xdr_R09AttrSelCctrl ();
extern bool_t xdr_R09AttributeCctrl ();
extern bool_t xdr_RideEventSourceCctrl ();
extern bool_t xdr_RideEventCctrl ();
extern bool_t xdr_AmliEventTypeCctrl ();
extern bool_t xdr_AmliCheckOutTypeCctrl ();
extern bool_t xdr_AmliDtoCctrl ();
extern bool_t xdr_ArchiveDtoCctrl ();
extern bool_t xdr_ArchiveResultCctrl ();
extern bool_t xdr_ArchiveResultArrayCctrl ();
extern bool_t xdr_ArchiveSubscribeInfoCctrl ();
extern bool_t xdr_TdtSubscriptionInfoCctrl ();
extern bool_t xdr_R09TelegramCctrl ();
extern bool_t xdr_AmliDtosCctrl ();
extern bool_t xdr_TypOfRideCctrl ();
extern bool_t xdr_RideExtensionSelector ();
extern bool_t xdr_RideExtensionCctrl ();
extern bool_t xdr_IntersectionRideCctrl ();
extern bool_t xdr_IntersectionRidesCctrl ();
extern bool_t xdr_CycleTimelineEntryTypeCctrl ();
extern bool_t xdr_CteCyclicCctrl ();
extern bool_t xdr_CteStallingCctrl ();
extern bool_t xdr_CteSpecificCctrl ();
extern bool_t xdr_CycleTimelineEntryCctrl ();
extern bool_t xdr_CycleTimelineCctrl ();
extern bool_t xdr_TaLockStateCctrl ();
extern bool_t xdr_TaLocksCctrl ();
extern bool_t xdr_detstates_8_argument ();
extern bool_t xdr_actualsignalindications_8_argument ();
extern bool_t xdr_actualstatus_8_argument ();
extern bool_t xdr_requestedstatus_8_argument ();
extern bool_t xdr_targetstage_8_argument ();
extern bool_t xdr_intersectionrides_8_argument ();
extern bool_t xdr_devicevalues_8_argument ();
extern bool_t xdr_rideevent_8_argument ();
extern bool_t xdr_reportallqueuesareidle_8_argument ();
extern bool_t xdr_subscribe4tdt_8_argument ();
extern bool_t xdr_unsubscribe4tdt_8_argument ();
extern bool_t xdr_allqueuesareidle_8_argument ();
extern bool_t xdr_renew_8_argument ();
extern bool_t xdr_getearliesttime4stagetransition_8_argument ();
extern bool_t xdr_checkadddesiredstageswitchingevents_8_argument ();
extern bool_t xdr_setintersectionstate_8_argument ();
extern bool_t xdr_setsubintersectionstate_8_argument ();
extern bool_t xdr_setsignalprogram_8_argument ();
extern bool_t xdr_setspecialintervention_8_argument ();
extern bool_t xdr_setmodvastate_8_argument ();
extern bool_t xdr_setmodivstate_8_argument ();
extern bool_t xdr_setmodoevstate_8_argument ();
extern bool_t xdr_setsynchronizationstate_8_argument ();
extern bool_t xdr_setprojectspecificmodstate_8_argument ();
extern bool_t xdr_settaactualstatus_8_argument ();
extern bool_t xdr_getdraftcomponentparams_8_argument ();
extern bool_t xdr_setcltstatus_8_argument ();
extern bool_t xdr_archivegetlaterthan_8_argument ();
extern bool_t xdr_addmsgresetarchive_8_argument ();
extern bool_t xdr_setaggregationcycle_8_argument ();
extern bool_t xdr_forwardptrequest_8_argument ();
extern bool_t xdr_getdraftintersectionversionasxmlstring_8_argument ();
extern bool_t xdr_getdraftsystemconfigversionasxmlstring_8_argument ();
extern bool_t xdr_getdraftselectedcfg_8_argument ();
extern bool_t xdr_registerasconfigconsumer_8_argument ();
extern bool_t xdr_unregisterasconfigconsumer_8_argument ();
extern bool_t xdr_registerdevicevariableprovider_8_argument ();
extern bool_t xdr_setsplcycletimecounterto_8_argument ();
extern bool_t xdr_stallsplcycletimecounterto_8_argument ();
extern bool_t xdr_invalidatecycletimecounterat_8_argument ();
extern bool_t xdr_prepare4shutdown2update_8_argument ();
extern bool_t xdr_settalock_8_argument ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_CCONTROL_H_RPCGEN */
